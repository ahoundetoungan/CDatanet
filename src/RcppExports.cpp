// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// fL
arma::vec fL(const arma::vec& ZtLambda, const arma::vec& delta, const int& Rbar, const int& n);
RcppExport SEXP _CDatanet_fL(SEXP ZtLambdaSEXP, SEXP deltaSEXP, SEXP RbarSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ZtLambda(ZtLambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const int& >::type Rbar(RbarSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(fL(ZtLambda, delta, Rbar, n));
    return rcpp_result_gen;
END_RCPP
}
// fLncond
arma::vec fLncond(const arma::mat& ZtLambda, const arma::vec& delta, const int& Rbar, const int& n, const int& nsimu);
RcppExport SEXP _CDatanet_fLncond(SEXP ZtLambdaSEXP, SEXP deltaSEXP, SEXP RbarSEXP, SEXP nSEXP, SEXP nsimuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type ZtLambda(ZtLambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const int& >::type Rbar(RbarSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int& >::type nsimu(nsimuSEXP);
    rcpp_result_gen = Rcpp::wrap(fLncond(ZtLambda, delta, Rbar, n, nsimu));
    return rcpp_result_gen;
END_RCPP
}
// fyb
int fyb(arma::vec& yb, arma::vec& Gyb, List& G, const arma::mat& igroup, const int& ngroup, const arma::vec& psi, const double& lambda, const arma::vec& delta, const int& n, const int& Rbar, const double& tol, const int& maxit);
RcppExport SEXP _CDatanet_fyb(SEXP ybSEXP, SEXP GybSEXP, SEXP GSEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP psiSEXP, SEXP lambdaSEXP, SEXP deltaSEXP, SEXP nSEXP, SEXP RbarSEXP, SEXP tolSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type yb(ybSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Gyb(GybSEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int& >::type Rbar(RbarSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(fyb(yb, Gyb, G, igroup, ngroup, psi, lambda, delta, n, Rbar, tol, maxit));
    return rcpp_result_gen;
END_RCPP
}
// fybncond
int fybncond(arma::vec& yb, arma::vec& Gyb, List& G, const arma::mat& igroup, const int& ngroup, const arma::mat& psi, const double& lambda, const arma::vec& delta, const int& n, const int& nsimu, const int& Rbar, const double& tol, const int& maxit);
RcppExport SEXP _CDatanet_fybncond(SEXP ybSEXP, SEXP GybSEXP, SEXP GSEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP psiSEXP, SEXP lambdaSEXP, SEXP deltaSEXP, SEXP nSEXP, SEXP nsimuSEXP, SEXP RbarSEXP, SEXP tolSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type yb(ybSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Gyb(GybSEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int& >::type nsimu(nsimuSEXP);
    Rcpp::traits::input_parameter< const int& >::type Rbar(RbarSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(fybncond(yb, Gyb, G, igroup, ngroup, psi, lambda, delta, n, nsimu, Rbar, tol, maxit));
    return rcpp_result_gen;
END_RCPP
}
// fy
arma::vec fy(const arma::vec& yst, const double& maxyst, const arma::vec& delta, const int& n, const int& Rbar);
RcppExport SEXP _CDatanet_fy(SEXP ystSEXP, SEXP maxystSEXP, SEXP deltaSEXP, SEXP nSEXP, SEXP RbarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type yst(ystSEXP);
    Rcpp::traits::input_parameter< const double& >::type maxyst(maxystSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int& >::type Rbar(RbarSEXP);
    rcpp_result_gen = Rcpp::wrap(fy(yst, maxyst, delta, n, Rbar));
    return rcpp_result_gen;
END_RCPP
}
// fmeffects
List fmeffects(const int& n, const arma::vec& delta, const int& Rbar, const NumericVector& ZtLambda, const arma::vec& lbeta);
RcppExport SEXP _CDatanet_fmeffects(SEXP nSEXP, SEXP deltaSEXP, SEXP RbarSEXP, SEXP ZtLambdaSEXP, SEXP lbetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const int& >::type Rbar(RbarSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type ZtLambda(ZtLambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lbeta(lbetaSEXP);
    rcpp_result_gen = Rcpp::wrap(fmeffects(n, delta, Rbar, ZtLambda, lbeta));
    return rcpp_result_gen;
END_RCPP
}
// foptimREM
double foptimREM(arma::vec& yb, arma::vec& Gyb, const arma::vec& theta, const arma::mat& X, List& G, const arma::mat& igroup, const int& ngroup, const int& K, const int& n, const int& Rbar, const arma::uvec& y, const int& maxy, const double& tol, const int& maxit);
RcppExport SEXP _CDatanet_foptimREM(SEXP ybSEXP, SEXP GybSEXP, SEXP thetaSEXP, SEXP XSEXP, SEXP GSEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP KSEXP, SEXP nSEXP, SEXP RbarSEXP, SEXP ySEXP, SEXP maxySEXP, SEXP tolSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type yb(ybSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Gyb(GybSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int& >::type Rbar(RbarSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const int& >::type maxy(maxySEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(foptimREM(yb, Gyb, theta, X, G, igroup, ngroup, K, n, Rbar, y, maxy, tol, maxit));
    return rcpp_result_gen;
END_RCPP
}
// foptimREMncond1
double foptimREMncond1(arma::vec& yb, arma::vec& Gyb, const arma::vec& theta, const arma::mat& X, const arma::mat& Simu1, const int& nsimu, List& G, const arma::mat& igroup, const int& ngroup, const int& K, const int& n, const int& Rbar, const arma::uvec& y, const int& maxy, const double& tol, const int& maxit);
RcppExport SEXP _CDatanet_foptimREMncond1(SEXP ybSEXP, SEXP GybSEXP, SEXP thetaSEXP, SEXP XSEXP, SEXP Simu1SEXP, SEXP nsimuSEXP, SEXP GSEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP KSEXP, SEXP nSEXP, SEXP RbarSEXP, SEXP ySEXP, SEXP maxySEXP, SEXP tolSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type yb(ybSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Gyb(GybSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Simu1(Simu1SEXP);
    Rcpp::traits::input_parameter< const int& >::type nsimu(nsimuSEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int& >::type Rbar(RbarSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const int& >::type maxy(maxySEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(foptimREMncond1(yb, Gyb, theta, X, Simu1, nsimu, G, igroup, ngroup, K, n, Rbar, y, maxy, tol, maxit));
    return rcpp_result_gen;
END_RCPP
}
// foptimREM_NPL
double foptimREM_NPL(const arma::vec& Gyb, const arma::vec& theta, const arma::mat& X, const int& Rbar, const int& maxy, const int& K, const int& n, const arma::uvec& y);
RcppExport SEXP _CDatanet_foptimREM_NPL(SEXP GybSEXP, SEXP thetaSEXP, SEXP XSEXP, SEXP RbarSEXP, SEXP maxySEXP, SEXP KSEXP, SEXP nSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Gyb(GybSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int& >::type Rbar(RbarSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxy(maxySEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(foptimREM_NPL(Gyb, theta, X, Rbar, maxy, K, n, y));
    return rcpp_result_gen;
END_RCPP
}
// fL_NPL
void fL_NPL(arma::vec& yb, arma::vec& Gyb, List& G, const arma::mat& igroup, const int& ngroup, const arma::mat& X, const arma::vec& theta, const int& Rbar, const int& K, const int& n);
RcppExport SEXP _CDatanet_fL_NPL(SEXP ybSEXP, SEXP GybSEXP, SEXP GSEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP XSEXP, SEXP thetaSEXP, SEXP RbarSEXP, SEXP KSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type yb(ybSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Gyb(GybSEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const int& >::type Rbar(RbarSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    fL_NPL(yb, Gyb, G, igroup, ngroup, X, theta, Rbar, K, n);
    return R_NilValue;
END_RCPP
}
// fnewyb
void fnewyb(arma::vec& yb, arma::vec& Gyb, List& G, const arma::mat& igroup, const int& ngroup, const arma::mat& X, const arma::vec& theta, const int& Rbar, const int& K, const int& n, const double& tol, const int& maxit);
RcppExport SEXP _CDatanet_fnewyb(SEXP ybSEXP, SEXP GybSEXP, SEXP GSEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP XSEXP, SEXP thetaSEXP, SEXP RbarSEXP, SEXP KSEXP, SEXP nSEXP, SEXP tolSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type yb(ybSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Gyb(GybSEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const int& >::type Rbar(RbarSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    fnewyb(yb, Gyb, G, igroup, ngroup, X, theta, Rbar, K, n, tol, maxit);
    return R_NilValue;
END_RCPP
}
// foptimREM_NPLncond1
double foptimREM_NPLncond1(const arma::vec& Gyb, const arma::vec& theta, const arma::mat& X, const arma::mat& Simu1, const int& nsimu, const int& Rbar, const int& maxy, const int& K, const int& n, const arma::uvec& y);
RcppExport SEXP _CDatanet_foptimREM_NPLncond1(SEXP GybSEXP, SEXP thetaSEXP, SEXP XSEXP, SEXP Simu1SEXP, SEXP nsimuSEXP, SEXP RbarSEXP, SEXP maxySEXP, SEXP KSEXP, SEXP nSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Gyb(GybSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Simu1(Simu1SEXP);
    Rcpp::traits::input_parameter< const int& >::type nsimu(nsimuSEXP);
    Rcpp::traits::input_parameter< const int& >::type Rbar(RbarSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxy(maxySEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(foptimREM_NPLncond1(Gyb, theta, X, Simu1, nsimu, Rbar, maxy, K, n, y));
    return rcpp_result_gen;
END_RCPP
}
// fL_NPLncond1
void fL_NPLncond1(arma::vec& yb, arma::vec& Gyb, List& G, const arma::mat& igroup, const int& ngroup, const arma::mat& X, const arma::vec& theta, const arma::mat& Simu1, const int& nsimu, const int& Rbar, const int& K, const int& n);
RcppExport SEXP _CDatanet_fL_NPLncond1(SEXP ybSEXP, SEXP GybSEXP, SEXP GSEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP XSEXP, SEXP thetaSEXP, SEXP Simu1SEXP, SEXP nsimuSEXP, SEXP RbarSEXP, SEXP KSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type yb(ybSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Gyb(GybSEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Simu1(Simu1SEXP);
    Rcpp::traits::input_parameter< const int& >::type nsimu(nsimuSEXP);
    Rcpp::traits::input_parameter< const int& >::type Rbar(RbarSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    fL_NPLncond1(yb, Gyb, G, igroup, ngroup, X, theta, Simu1, nsimu, Rbar, K, n);
    return R_NilValue;
END_RCPP
}
// foptimREM_NPLncond2
double foptimREM_NPLncond2(const arma::vec& Gyb, const arma::vec& theta, const arma::mat& X, const arma::mat& Simu1, const arma::mat& Simu2, const int& nsimu, const int& Rbar, const int& maxy, const int& K, const int& n, const arma::uvec& y);
RcppExport SEXP _CDatanet_foptimREM_NPLncond2(SEXP GybSEXP, SEXP thetaSEXP, SEXP XSEXP, SEXP Simu1SEXP, SEXP Simu2SEXP, SEXP nsimuSEXP, SEXP RbarSEXP, SEXP maxySEXP, SEXP KSEXP, SEXP nSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Gyb(GybSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Simu1(Simu1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Simu2(Simu2SEXP);
    Rcpp::traits::input_parameter< const int& >::type nsimu(nsimuSEXP);
    Rcpp::traits::input_parameter< const int& >::type Rbar(RbarSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxy(maxySEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(foptimREM_NPLncond2(Gyb, theta, X, Simu1, Simu2, nsimu, Rbar, maxy, K, n, y));
    return rcpp_result_gen;
END_RCPP
}
// fL_NPLncond2
void fL_NPLncond2(arma::vec& yb, arma::vec& Gyb, List& G, const arma::mat& igroup, const int& ngroup, const arma::mat& X, const arma::vec& theta, const arma::mat& Simu1, const arma::mat& Simu2, const int& nsimu, const int& Rbar, const int& K, const int& n);
RcppExport SEXP _CDatanet_fL_NPLncond2(SEXP ybSEXP, SEXP GybSEXP, SEXP GSEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP XSEXP, SEXP thetaSEXP, SEXP Simu1SEXP, SEXP Simu2SEXP, SEXP nsimuSEXP, SEXP RbarSEXP, SEXP KSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type yb(ybSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Gyb(GybSEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Simu1(Simu1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Simu2(Simu2SEXP);
    Rcpp::traits::input_parameter< const int& >::type nsimu(nsimuSEXP);
    Rcpp::traits::input_parameter< const int& >::type Rbar(RbarSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    fL_NPLncond2(yb, Gyb, G, igroup, ngroup, X, theta, Simu1, Simu2, nsimu, Rbar, K, n);
    return R_NilValue;
END_RCPP
}
// flogintphi
arma::vec flogintphi(const int& n, const int& S, const double& a, const double& b, const arma::vec& Mean, const arma::rowvec& simu, const arma::mat& igroup, const int& ngroup);
RcppExport SEXP _CDatanet_flogintphi(SEXP nSEXP, SEXP SSEXP, SEXP aSEXP, SEXP bSEXP, SEXP MeanSEXP, SEXP simuSEXP, SEXP igroupSEXP, SEXP ngroupSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Mean(MeanSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type simu(simuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    rcpp_result_gen = Rcpp::wrap(flogintphi(n, S, a, b, Mean, simu, igroup, ngroup));
    return rcpp_result_gen;
END_RCPP
}
// cdnetLBFGS
List cdnetLBFGS(Eigen::VectorXd par, const arma::vec& Gyb, const arma::mat& X, const int& Rbar, const int& maxy, const int& K, const int& n, const arma::uvec& y, const int& maxit, const double& eps_f, const double& eps_g, const bool& print);
RcppExport SEXP _CDatanet_cdnetLBFGS(SEXP parSEXP, SEXP GybSEXP, SEXP XSEXP, SEXP RbarSEXP, SEXP maxySEXP, SEXP KSEXP, SEXP nSEXP, SEXP ySEXP, SEXP maxitSEXP, SEXP eps_fSEXP, SEXP eps_gSEXP, SEXP printSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type par(parSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gyb(GybSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int& >::type Rbar(RbarSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxy(maxySEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps_f(eps_fSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps_g(eps_gSEXP);
    Rcpp::traits::input_parameter< const bool& >::type print(printSEXP);
    rcpp_result_gen = Rcpp::wrap(cdnetLBFGS(par, Gyb, X, Rbar, maxy, K, n, y, maxit, eps_f, eps_g, print));
    return rcpp_result_gen;
END_RCPP
}
// fcovCDI
List fcovCDI(const int& n, const arma::vec& Gyb, const arma::vec& theta, const arma::mat& X, const int& Rbar, const int& K, const int& S, List& G, const arma::mat& igroup, const int& ngroup, const bool& ccov);
RcppExport SEXP _CDatanet_fcovCDI(SEXP nSEXP, SEXP GybSEXP, SEXP thetaSEXP, SEXP XSEXP, SEXP RbarSEXP, SEXP KSEXP, SEXP SSEXP, SEXP GSEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP ccovSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gyb(GybSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int& >::type Rbar(RbarSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const bool& >::type ccov(ccovSEXP);
    rcpp_result_gen = Rcpp::wrap(fcovCDI(n, Gyb, theta, X, Rbar, K, S, G, igroup, ngroup, ccov));
    return rcpp_result_gen;
END_RCPP
}
// fL2
arma::vec fL2(const arma::vec& ZtLambda, const double& lambda, const arma::vec& delta, const double& bdelta, const double& rho, const int& Rbar, const int& n);
RcppExport SEXP _CDatanet_fL2(SEXP ZtLambdaSEXP, SEXP lambdaSEXP, SEXP deltaSEXP, SEXP bdeltaSEXP, SEXP rhoSEXP, SEXP RbarSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ZtLambda(ZtLambdaSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const double& >::type bdelta(bdeltaSEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const int& >::type Rbar(RbarSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(fL2(ZtLambda, lambda, delta, bdelta, rho, Rbar, n));
    return rcpp_result_gen;
END_RCPP
}
// fLncond2
arma::vec fLncond2(const arma::mat& ZtLambda, const double& lambda, const arma::vec& delta, const double& bdelta, const double& rho, const int& Rbar, const int& n, const int& nsimu);
RcppExport SEXP _CDatanet_fLncond2(SEXP ZtLambdaSEXP, SEXP lambdaSEXP, SEXP deltaSEXP, SEXP bdeltaSEXP, SEXP rhoSEXP, SEXP RbarSEXP, SEXP nSEXP, SEXP nsimuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type ZtLambda(ZtLambdaSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const double& >::type bdelta(bdeltaSEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const int& >::type Rbar(RbarSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int& >::type nsimu(nsimuSEXP);
    rcpp_result_gen = Rcpp::wrap(fLncond2(ZtLambda, lambda, delta, bdelta, rho, Rbar, n, nsimu));
    return rcpp_result_gen;
END_RCPP
}
// fyb2
int fyb2(arma::vec& yb, arma::vec& Gyb, List& G, const arma::mat& igroup, const int& ngroup, const arma::vec& psi, const double& lambda, const arma::vec& delta, const double& bdelta, const double& rho, const int& n, const int& Rbar, const double& tol, const int& maxit);
RcppExport SEXP _CDatanet_fyb2(SEXP ybSEXP, SEXP GybSEXP, SEXP GSEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP psiSEXP, SEXP lambdaSEXP, SEXP deltaSEXP, SEXP bdeltaSEXP, SEXP rhoSEXP, SEXP nSEXP, SEXP RbarSEXP, SEXP tolSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type yb(ybSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Gyb(GybSEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const double& >::type bdelta(bdeltaSEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int& >::type Rbar(RbarSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(fyb2(yb, Gyb, G, igroup, ngroup, psi, lambda, delta, bdelta, rho, n, Rbar, tol, maxit));
    return rcpp_result_gen;
END_RCPP
}
// fybncond2
int fybncond2(arma::vec& yb, arma::vec& Gyb, List& G, const arma::mat& igroup, const int& ngroup, const arma::mat& psi, const double& lambda, const arma::vec& delta, const double& bdelta, const double& rho, const int& n, const int& nsimu, const int& Rbar, const double& tol, const int& maxit);
RcppExport SEXP _CDatanet_fybncond2(SEXP ybSEXP, SEXP GybSEXP, SEXP GSEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP psiSEXP, SEXP lambdaSEXP, SEXP deltaSEXP, SEXP bdeltaSEXP, SEXP rhoSEXP, SEXP nSEXP, SEXP nsimuSEXP, SEXP RbarSEXP, SEXP tolSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type yb(ybSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Gyb(GybSEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const double& >::type bdelta(bdeltaSEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int& >::type nsimu(nsimuSEXP);
    Rcpp::traits::input_parameter< const int& >::type Rbar(RbarSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(fybncond2(yb, Gyb, G, igroup, ngroup, psi, lambda, delta, bdelta, rho, n, nsimu, Rbar, tol, maxit));
    return rcpp_result_gen;
END_RCPP
}
// fy2
arma::vec fy2(const arma::vec& yst, const double& maxyst, const double& lambda, const arma::vec& delta, const double& bdelta, const double& rho, const int& n, const int& Rbar);
RcppExport SEXP _CDatanet_fy2(SEXP ystSEXP, SEXP maxystSEXP, SEXP lambdaSEXP, SEXP deltaSEXP, SEXP bdeltaSEXP, SEXP rhoSEXP, SEXP nSEXP, SEXP RbarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type yst(ystSEXP);
    Rcpp::traits::input_parameter< const double& >::type maxyst(maxystSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const double& >::type bdelta(bdeltaSEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int& >::type Rbar(RbarSEXP);
    rcpp_result_gen = Rcpp::wrap(fy2(yst, maxyst, lambda, delta, bdelta, rho, n, Rbar));
    return rcpp_result_gen;
END_RCPP
}
// fmeffects2
List fmeffects2(const int& n, const double& lambda, const arma::vec& delta, const double& bdelta, const double& rho, const int& Rbar, const NumericVector& ZtLambda, const arma::vec& lbeta);
RcppExport SEXP _CDatanet_fmeffects2(SEXP nSEXP, SEXP lambdaSEXP, SEXP deltaSEXP, SEXP bdeltaSEXP, SEXP rhoSEXP, SEXP RbarSEXP, SEXP ZtLambdaSEXP, SEXP lbetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const double& >::type bdelta(bdeltaSEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const int& >::type Rbar(RbarSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type ZtLambda(ZtLambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lbeta(lbetaSEXP);
    rcpp_result_gen = Rcpp::wrap(fmeffects2(n, lambda, delta, bdelta, rho, Rbar, ZtLambda, lbeta));
    return rcpp_result_gen;
END_RCPP
}
// foptimREM2
double foptimREM2(arma::vec& yb, arma::vec& Gyb, const arma::vec& theta, const arma::mat& X, List& G, const arma::mat& igroup, const int& ngroup, const int& K, const int& n, const int& Rbar, const arma::uvec& y, const int& maxy, const double& tol, const int& maxit);
RcppExport SEXP _CDatanet_foptimREM2(SEXP ybSEXP, SEXP GybSEXP, SEXP thetaSEXP, SEXP XSEXP, SEXP GSEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP KSEXP, SEXP nSEXP, SEXP RbarSEXP, SEXP ySEXP, SEXP maxySEXP, SEXP tolSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type yb(ybSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Gyb(GybSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int& >::type Rbar(RbarSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const int& >::type maxy(maxySEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(foptimREM2(yb, Gyb, theta, X, G, igroup, ngroup, K, n, Rbar, y, maxy, tol, maxit));
    return rcpp_result_gen;
END_RCPP
}
// foptimREMncond12
double foptimREMncond12(arma::vec& yb, arma::vec& Gyb, const arma::vec& theta, const arma::mat& X, const arma::mat& Simu1, const int& nsimu, List& G, const arma::mat& igroup, const int& ngroup, const int& K, const int& n, const int& Rbar, const arma::uvec& y, const int& maxy, const double& tol, const int& maxit);
RcppExport SEXP _CDatanet_foptimREMncond12(SEXP ybSEXP, SEXP GybSEXP, SEXP thetaSEXP, SEXP XSEXP, SEXP Simu1SEXP, SEXP nsimuSEXP, SEXP GSEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP KSEXP, SEXP nSEXP, SEXP RbarSEXP, SEXP ySEXP, SEXP maxySEXP, SEXP tolSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type yb(ybSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Gyb(GybSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Simu1(Simu1SEXP);
    Rcpp::traits::input_parameter< const int& >::type nsimu(nsimuSEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int& >::type Rbar(RbarSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const int& >::type maxy(maxySEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(foptimREMncond12(yb, Gyb, theta, X, Simu1, nsimu, G, igroup, ngroup, K, n, Rbar, y, maxy, tol, maxit));
    return rcpp_result_gen;
END_RCPP
}
// foptimREM_NPL2
double foptimREM_NPL2(const arma::vec& Gyb, const arma::vec& theta, const arma::mat& X, const int& Rbar, const int& maxy, const int& K, const int& n, const arma::uvec& y);
RcppExport SEXP _CDatanet_foptimREM_NPL2(SEXP GybSEXP, SEXP thetaSEXP, SEXP XSEXP, SEXP RbarSEXP, SEXP maxySEXP, SEXP KSEXP, SEXP nSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Gyb(GybSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int& >::type Rbar(RbarSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxy(maxySEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(foptimREM_NPL2(Gyb, theta, X, Rbar, maxy, K, n, y));
    return rcpp_result_gen;
END_RCPP
}
// fL_NPL2
void fL_NPL2(arma::vec& yb, arma::vec& Gyb, List& G, const arma::mat& igroup, const int& ngroup, const arma::mat& X, const arma::vec& theta, const int& Rbar, const int& K, const int& n);
RcppExport SEXP _CDatanet_fL_NPL2(SEXP ybSEXP, SEXP GybSEXP, SEXP GSEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP XSEXP, SEXP thetaSEXP, SEXP RbarSEXP, SEXP KSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type yb(ybSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Gyb(GybSEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const int& >::type Rbar(RbarSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    fL_NPL2(yb, Gyb, G, igroup, ngroup, X, theta, Rbar, K, n);
    return R_NilValue;
END_RCPP
}
// fnewyb2
void fnewyb2(arma::vec& yb, arma::vec& Gyb, List& G, const arma::mat& igroup, const int& ngroup, const arma::mat& X, const arma::vec& theta, const int& Rbar, const int& K, const int& n, const double& tol, const int& maxit);
RcppExport SEXP _CDatanet_fnewyb2(SEXP ybSEXP, SEXP GybSEXP, SEXP GSEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP XSEXP, SEXP thetaSEXP, SEXP RbarSEXP, SEXP KSEXP, SEXP nSEXP, SEXP tolSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type yb(ybSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Gyb(GybSEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const int& >::type Rbar(RbarSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    fnewyb2(yb, Gyb, G, igroup, ngroup, X, theta, Rbar, K, n, tol, maxit);
    return R_NilValue;
END_RCPP
}
// foptimREM_NPLncond12
double foptimREM_NPLncond12(const arma::vec& Gyb, const arma::vec& theta, const arma::mat& X, const arma::mat& Simu1, const int& nsimu, const int& Rbar, const int& maxy, const int& K, const int& n, const arma::uvec& y);
RcppExport SEXP _CDatanet_foptimREM_NPLncond12(SEXP GybSEXP, SEXP thetaSEXP, SEXP XSEXP, SEXP Simu1SEXP, SEXP nsimuSEXP, SEXP RbarSEXP, SEXP maxySEXP, SEXP KSEXP, SEXP nSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Gyb(GybSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Simu1(Simu1SEXP);
    Rcpp::traits::input_parameter< const int& >::type nsimu(nsimuSEXP);
    Rcpp::traits::input_parameter< const int& >::type Rbar(RbarSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxy(maxySEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(foptimREM_NPLncond12(Gyb, theta, X, Simu1, nsimu, Rbar, maxy, K, n, y));
    return rcpp_result_gen;
END_RCPP
}
// fL_NPLncond12
void fL_NPLncond12(arma::vec& yb, arma::vec& Gyb, List& G, const arma::mat& igroup, const int& ngroup, const arma::mat& X, const arma::vec& theta, const arma::mat& Simu1, const int& nsimu, const int& Rbar, const int& K, const int& n);
RcppExport SEXP _CDatanet_fL_NPLncond12(SEXP ybSEXP, SEXP GybSEXP, SEXP GSEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP XSEXP, SEXP thetaSEXP, SEXP Simu1SEXP, SEXP nsimuSEXP, SEXP RbarSEXP, SEXP KSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type yb(ybSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Gyb(GybSEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Simu1(Simu1SEXP);
    Rcpp::traits::input_parameter< const int& >::type nsimu(nsimuSEXP);
    Rcpp::traits::input_parameter< const int& >::type Rbar(RbarSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    fL_NPLncond12(yb, Gyb, G, igroup, ngroup, X, theta, Simu1, nsimu, Rbar, K, n);
    return R_NilValue;
END_RCPP
}
// foptimREM_NPLncond22
double foptimREM_NPLncond22(const arma::vec& Gyb, const arma::vec& theta, const arma::mat& X, const arma::mat& Simu1, const arma::mat& Simu2, const int& nsimu, const int& Rbar, const int& maxy, const int& K, const int& n, const arma::uvec& y);
RcppExport SEXP _CDatanet_foptimREM_NPLncond22(SEXP GybSEXP, SEXP thetaSEXP, SEXP XSEXP, SEXP Simu1SEXP, SEXP Simu2SEXP, SEXP nsimuSEXP, SEXP RbarSEXP, SEXP maxySEXP, SEXP KSEXP, SEXP nSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Gyb(GybSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Simu1(Simu1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Simu2(Simu2SEXP);
    Rcpp::traits::input_parameter< const int& >::type nsimu(nsimuSEXP);
    Rcpp::traits::input_parameter< const int& >::type Rbar(RbarSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxy(maxySEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(foptimREM_NPLncond22(Gyb, theta, X, Simu1, Simu2, nsimu, Rbar, maxy, K, n, y));
    return rcpp_result_gen;
END_RCPP
}
// fL_NPLncond22
void fL_NPLncond22(arma::vec& yb, arma::vec& Gyb, List& G, const arma::mat& igroup, const int& ngroup, const arma::mat& X, const arma::vec& theta, const arma::mat& Simu1, const arma::mat& Simu2, const int& nsimu, const int& Rbar, const int& K, const int& n);
RcppExport SEXP _CDatanet_fL_NPLncond22(SEXP ybSEXP, SEXP GybSEXP, SEXP GSEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP XSEXP, SEXP thetaSEXP, SEXP Simu1SEXP, SEXP Simu2SEXP, SEXP nsimuSEXP, SEXP RbarSEXP, SEXP KSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type yb(ybSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Gyb(GybSEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Simu1(Simu1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Simu2(Simu2SEXP);
    Rcpp::traits::input_parameter< const int& >::type nsimu(nsimuSEXP);
    Rcpp::traits::input_parameter< const int& >::type Rbar(RbarSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    fL_NPLncond22(yb, Gyb, G, igroup, ngroup, X, theta, Simu1, Simu2, nsimu, Rbar, K, n);
    return R_NilValue;
END_RCPP
}
// cdnetLBFGSrho
List cdnetLBFGSrho(Eigen::VectorXd par, const arma::vec& Gyb, const arma::mat& X, const int& Rbar, const int& maxy, const int& K, const int& n, const arma::uvec& y, const int& maxit, const double& eps_f, const double& eps_g, const bool& print);
RcppExport SEXP _CDatanet_cdnetLBFGSrho(SEXP parSEXP, SEXP GybSEXP, SEXP XSEXP, SEXP RbarSEXP, SEXP maxySEXP, SEXP KSEXP, SEXP nSEXP, SEXP ySEXP, SEXP maxitSEXP, SEXP eps_fSEXP, SEXP eps_gSEXP, SEXP printSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type par(parSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gyb(GybSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int& >::type Rbar(RbarSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxy(maxySEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps_f(eps_fSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps_g(eps_gSEXP);
    Rcpp::traits::input_parameter< const bool& >::type print(printSEXP);
    rcpp_result_gen = Rcpp::wrap(cdnetLBFGSrho(par, Gyb, X, Rbar, maxy, K, n, y, maxit, eps_f, eps_g, print));
    return rcpp_result_gen;
END_RCPP
}
// fcovCDI2
List fcovCDI2(const int& n, const arma::vec& Gyb, const arma::vec& theta, const arma::mat& X, const int& Rbar, const int& K, const int& S, List& G, const arma::mat& igroup, const int& ngroup, const bool& ccov);
RcppExport SEXP _CDatanet_fcovCDI2(SEXP nSEXP, SEXP GybSEXP, SEXP thetaSEXP, SEXP XSEXP, SEXP RbarSEXP, SEXP KSEXP, SEXP SSEXP, SEXP GSEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP ccovSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gyb(GybSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int& >::type Rbar(RbarSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const bool& >::type ccov(ccovSEXP);
    rcpp_result_gen = Rcpp::wrap(fcovCDI2(n, Gyb, theta, X, Rbar, K, S, G, igroup, ngroup, ccov));
    return rcpp_result_gen;
END_RCPP
}
// fdummies
void fdummies(arma::mat& out, const arma::mat& limit, const int& M, const int& n);
RcppExport SEXP _CDatanet_fdummies(SEXP outSEXP, SEXP limitSEXP, SEXP MSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type out(outSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type limit(limitSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    fdummies(out, limit, M, n);
    return R_NilValue;
END_RCPP
}
// fmusum
arma::vec fmusum(const arma::vec& mu, const arma::vec& nu, const arma::mat& index, const arma::mat& indexgr, const int& M, const int& N);
RcppExport SEXP _CDatanet_fmusum(SEXP muSEXP, SEXP nuSEXP, SEXP indexSEXP, SEXP indexgrSEXP, SEXP MSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type index(indexSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type indexgr(indexgrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(fmusum(mu, nu, index, indexgr, M, N));
    return rcpp_result_gen;
END_RCPP
}
// updategparms1
List updategparms1(const arma::vec& a, const arma::mat& dx, const arma::mat& invdxdx, const arma::vec& beta0, const arma::vec& mu0, const arma::vec& nu0, const double& smu20, const double& snu20, const double& rho0, const arma::mat& index, const arma::mat& indexgr, const arma::mat& INDEXgr, const int& nfix, const int& N, const int& M, const int& K, const int& Kx, const arma::vec& nvec, const int& n, const int& iteration);
RcppExport SEXP _CDatanet_updategparms1(SEXP aSEXP, SEXP dxSEXP, SEXP invdxdxSEXP, SEXP beta0SEXP, SEXP mu0SEXP, SEXP nu0SEXP, SEXP smu20SEXP, SEXP snu20SEXP, SEXP rho0SEXP, SEXP indexSEXP, SEXP indexgrSEXP, SEXP INDEXgrSEXP, SEXP nfixSEXP, SEXP NSEXP, SEXP MSEXP, SEXP KSEXP, SEXP KxSEXP, SEXP nvecSEXP, SEXP nSEXP, SEXP iterationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dx(dxSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type invdxdx(invdxdxSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type nu0(nu0SEXP);
    Rcpp::traits::input_parameter< const double& >::type smu20(smu20SEXP);
    Rcpp::traits::input_parameter< const double& >::type snu20(snu20SEXP);
    Rcpp::traits::input_parameter< const double& >::type rho0(rho0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type index(indexSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type indexgr(indexgrSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type INDEXgr(INDEXgrSEXP);
    Rcpp::traits::input_parameter< const int& >::type nfix(nfixSEXP);
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx(KxSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type nvec(nvecSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int& >::type iteration(iterationSEXP);
    rcpp_result_gen = Rcpp::wrap(updategparms1(a, dx, invdxdx, beta0, mu0, nu0, smu20, snu20, rho0, index, indexgr, INDEXgr, nfix, N, M, K, Kx, nvec, n, iteration));
    return rcpp_result_gen;
END_RCPP
}
// updategparms2
List updategparms2(const arma::vec& a, const arma::mat& dx, const arma::mat& invdxdx, const arma::vec& beta0, const arma::vec& mu0, const arma::vec& nu0, const double& smu20, const double& snu20, const double& rho0, const arma::mat& index, const arma::mat& indexgr, const arma::mat& INDEXgr, const int& nfix, const int& N, const int& M, const int& K, const int& Kx, const arma::vec& nvec, const int& n, const int& iteration);
RcppExport SEXP _CDatanet_updategparms2(SEXP aSEXP, SEXP dxSEXP, SEXP invdxdxSEXP, SEXP beta0SEXP, SEXP mu0SEXP, SEXP nu0SEXP, SEXP smu20SEXP, SEXP snu20SEXP, SEXP rho0SEXP, SEXP indexSEXP, SEXP indexgrSEXP, SEXP INDEXgrSEXP, SEXP nfixSEXP, SEXP NSEXP, SEXP MSEXP, SEXP KSEXP, SEXP KxSEXP, SEXP nvecSEXP, SEXP nSEXP, SEXP iterationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dx(dxSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type invdxdx(invdxdxSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type nu0(nu0SEXP);
    Rcpp::traits::input_parameter< const double& >::type smu20(smu20SEXP);
    Rcpp::traits::input_parameter< const double& >::type snu20(snu20SEXP);
    Rcpp::traits::input_parameter< const double& >::type rho0(rho0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type index(indexSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type indexgr(indexgrSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type INDEXgr(INDEXgrSEXP);
    Rcpp::traits::input_parameter< const int& >::type nfix(nfixSEXP);
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx(KxSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type nvec(nvecSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int& >::type iteration(iterationSEXP);
    rcpp_result_gen = Rcpp::wrap(updategparms2(a, dx, invdxdx, beta0, mu0, nu0, smu20, snu20, rho0, index, indexgr, INDEXgr, nfix, N, M, K, Kx, nvec, n, iteration));
    return rcpp_result_gen;
END_RCPP
}
// fhomobeta
List fhomobeta(Eigen::VectorXd theta, const arma::vec& a, const arma::mat& dx, const arma::vec& nvec, const arma::mat& index, const arma::mat& indexgr, const int& M, const int maxit, const double& eps_f, const double& eps_g);
RcppExport SEXP _CDatanet_fhomobeta(SEXP thetaSEXP, SEXP aSEXP, SEXP dxSEXP, SEXP nvecSEXP, SEXP indexSEXP, SEXP indexgrSEXP, SEXP MSEXP, SEXP maxitSEXP, SEXP eps_fSEXP, SEXP eps_gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dx(dxSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type nvec(nvecSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type index(indexSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type indexgr(indexgrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps_f(eps_fSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps_g(eps_gSEXP);
    rcpp_result_gen = Rcpp::wrap(fhomobeta(theta, a, dx, nvec, index, indexgr, M, maxit, eps_f, eps_g));
    return rcpp_result_gen;
END_RCPP
}
// fhomobetap
List fhomobetap(Eigen::VectorXd theta, const arma::vec& a, const arma::mat& dx, const arma::vec& nvec, const arma::mat& index, const arma::mat& indexgr, const int& M, const int& maxit, const double& eps_f, const double& eps_g);
RcppExport SEXP _CDatanet_fhomobetap(SEXP thetaSEXP, SEXP aSEXP, SEXP dxSEXP, SEXP nvecSEXP, SEXP indexSEXP, SEXP indexgrSEXP, SEXP MSEXP, SEXP maxitSEXP, SEXP eps_fSEXP, SEXP eps_gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dx(dxSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type nvec(nvecSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type index(indexSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type indexgr(indexgrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps_f(eps_fSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps_g(eps_gSEXP);
    rcpp_result_gen = Rcpp::wrap(fhomobetap(theta, a, dx, nvec, index, indexgr, M, maxit, eps_f, eps_g));
    return rcpp_result_gen;
END_RCPP
}
// fySar
void fySar(arma::vec& y, arma::vec& Gy, List& G, const arma::vec& eps, const arma::mat& igroup, const int& ngroup, const arma::vec& psi, const double& lambda);
RcppExport SEXP _CDatanet_fySar(SEXP ySEXP, SEXP GySEXP, SEXP GSEXP, SEXP epsSEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP psiSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    fySar(y, Gy, G, eps, igroup, ngroup, psi, lambda);
    return R_NilValue;
END_RCPP
}
// foptimSAR
double foptimSAR(const double& alphatilde, const arma::mat& X, const arma::mat& invXX, List& G, List& I, const int& n, const arma::vec& y, const arma::vec& Gy, const int& ngroup, const bool& FE, const bool& print);
RcppExport SEXP _CDatanet_foptimSAR(SEXP alphatildeSEXP, SEXP XSEXP, SEXP invXXSEXP, SEXP GSEXP, SEXP ISEXP, SEXP nSEXP, SEXP ySEXP, SEXP GySEXP, SEXP ngroupSEXP, SEXP FESEXP, SEXP printSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alphatilde(alphatildeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type invXX(invXXSEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< List& >::type I(ISEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const bool& >::type FE(FESEXP);
    Rcpp::traits::input_parameter< const bool& >::type print(printSEXP);
    rcpp_result_gen = Rcpp::wrap(foptimSAR(alphatilde, X, invXX, G, I, n, y, Gy, ngroup, FE, print));
    return rcpp_result_gen;
END_RCPP
}
// fSARjac
arma::mat fSARjac(const double& lambda, const double& s2, const arma::mat& X, const arma::mat& XX, const arma::vec& Xbeta, List& G, List& I, const arma::mat igroup, const int& ngroup, const int& n, const int& K, const bool& FE);
RcppExport SEXP _CDatanet_fSARjac(SEXP lambdaSEXP, SEXP s2SEXP, SEXP XSEXP, SEXP XXSEXP, SEXP XbetaSEXP, SEXP GSEXP, SEXP ISEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP nSEXP, SEXP KSEXP, SEXP FESEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double& >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type XX(XXSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Xbeta(XbetaSEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< List& >::type I(ISEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const bool& >::type FE(FESEXP);
    rcpp_result_gen = Rcpp::wrap(fSARjac(lambda, s2, X, XX, Xbeta, G, I, igroup, ngroup, n, K, FE));
    return rcpp_result_gen;
END_RCPP
}
// fybsar
void fybsar(arma::vec& yb, arma::vec& Gyb, List& G, const arma::mat& igroup, const int& ngroup, const arma::vec& psi, const double& lambda);
RcppExport SEXP _CDatanet_fybsar(SEXP ybSEXP, SEXP GybSEXP, SEXP GSEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP psiSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type yb(ybSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Gyb(GybSEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    fybsar(yb, Gyb, G, igroup, ngroup, psi, lambda);
    return R_NilValue;
END_RCPP
}
// foptimSAR_RE
double foptimSAR_RE(const double& alphatilde, const arma::mat& X, List& G, List& I, const arma::vec& y, const arma::vec& Gy, const arma::mat igroup, const int& ngroup, const int& n, const int& K);
RcppExport SEXP _CDatanet_foptimSAR_RE(SEXP alphatildeSEXP, SEXP XSEXP, SEXP GSEXP, SEXP ISEXP, SEXP ySEXP, SEXP GySEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP nSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alphatilde(alphatildeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< List& >::type I(ISEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(foptimSAR_RE(alphatilde, X, G, I, y, Gy, igroup, ngroup, n, K));
    return rcpp_result_gen;
END_RCPP
}
// foptimSAR0_RE
double foptimSAR0_RE(const double& alphatilde, const arma::mat& X, List& G, List& I, const arma::vec& y, const arma::vec& Gy, const arma::mat igroup, const int& ngroup, const int& n, const int& K);
RcppExport SEXP _CDatanet_foptimSAR0_RE(SEXP alphatildeSEXP, SEXP XSEXP, SEXP GSEXP, SEXP ISEXP, SEXP ySEXP, SEXP GySEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP nSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alphatilde(alphatildeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< List& >::type I(ISEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(foptimSAR0_RE(alphatilde, X, G, I, y, Gy, igroup, ngroup, n, K));
    return rcpp_result_gen;
END_RCPP
}
// fyTobit
int fyTobit(arma::vec& yst, arma::vec& y, arma::vec& Gy, arma::vec& Ztlamda, List& G, const arma::vec& eps, const arma::mat& igroup, const int& ngroup, const arma::vec& psi, const int& n, const double& lambda, const double& tol, const int& maxit);
RcppExport SEXP _CDatanet_fyTobit(SEXP ystSEXP, SEXP ySEXP, SEXP GySEXP, SEXP ZtlamdaSEXP, SEXP GSEXP, SEXP epsSEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP psiSEXP, SEXP nSEXP, SEXP lambdaSEXP, SEXP tolSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type yst(ystSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Ztlamda(ZtlamdaSEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(fyTobit(yst, y, Gy, Ztlamda, G, eps, igroup, ngroup, psi, n, lambda, tol, maxit));
    return rcpp_result_gen;
END_RCPP
}
// foptimTobit
double foptimTobit(const arma::vec& theta, const arma::mat& X, arma::vec& logdetA2, arma::vec& alphatilde, List& G2, List& I2, const int& K, const arma::vec& y, const arma::vec& Gy, const arma::uvec& idpos, const arma::uvec& idzero, const int& npos, const int& ngroup, List& I, List& W, const int& n, const arma::mat igroup);
RcppExport SEXP _CDatanet_foptimTobit(SEXP thetaSEXP, SEXP XSEXP, SEXP logdetA2SEXP, SEXP alphatildeSEXP, SEXP G2SEXP, SEXP I2SEXP, SEXP KSEXP, SEXP ySEXP, SEXP GySEXP, SEXP idposSEXP, SEXP idzeroSEXP, SEXP nposSEXP, SEXP ngroupSEXP, SEXP ISEXP, SEXP WSEXP, SEXP nSEXP, SEXP igroupSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type logdetA2(logdetA2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alphatilde(alphatildeSEXP);
    Rcpp::traits::input_parameter< List& >::type G2(G2SEXP);
    Rcpp::traits::input_parameter< List& >::type I2(I2SEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type idpos(idposSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type idzero(idzeroSEXP);
    Rcpp::traits::input_parameter< const int& >::type npos(nposSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< List& >::type I(ISEXP);
    Rcpp::traits::input_parameter< List& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type igroup(igroupSEXP);
    rcpp_result_gen = Rcpp::wrap(foptimTobit(theta, X, logdetA2, alphatilde, G2, I2, K, y, Gy, idpos, idzero, npos, ngroup, I, W, n, igroup));
    return rcpp_result_gen;
END_RCPP
}
// foptimTobit0
double foptimTobit0(const arma::vec& theta, const arma::mat& X, arma::vec& logdetA2, arma::vec& alphatilde, List& G2, List& I2, const int& K, const arma::vec& y, const arma::vec& Gy, const arma::uvec& idpos, const arma::uvec& idzero, const int& npos, const int& ngroup, List& I, List& W, const int& n, const arma::mat igroup);
RcppExport SEXP _CDatanet_foptimTobit0(SEXP thetaSEXP, SEXP XSEXP, SEXP logdetA2SEXP, SEXP alphatildeSEXP, SEXP G2SEXP, SEXP I2SEXP, SEXP KSEXP, SEXP ySEXP, SEXP GySEXP, SEXP idposSEXP, SEXP idzeroSEXP, SEXP nposSEXP, SEXP ngroupSEXP, SEXP ISEXP, SEXP WSEXP, SEXP nSEXP, SEXP igroupSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type logdetA2(logdetA2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alphatilde(alphatildeSEXP);
    Rcpp::traits::input_parameter< List& >::type G2(G2SEXP);
    Rcpp::traits::input_parameter< List& >::type I2(I2SEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type idpos(idposSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type idzero(idzeroSEXP);
    Rcpp::traits::input_parameter< const int& >::type npos(nposSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< List& >::type I(ISEXP);
    Rcpp::traits::input_parameter< List& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type igroup(igroupSEXP);
    rcpp_result_gen = Rcpp::wrap(foptimTobit0(theta, X, logdetA2, alphatilde, G2, I2, K, y, Gy, idpos, idzero, npos, ngroup, I, W, n, igroup));
    return rcpp_result_gen;
END_RCPP
}
// fgradvecTobit
arma::vec fgradvecTobit(arma::vec& theta, arma::mat& X, const arma::vec& logdetA2, const arma::vec& alphatilde, List& G2, List& I2, const int& K, const arma::vec& y, const arma::vec& Gy, const arma::uvec& idpos, const arma::uvec& idzero, const int& ngroup, List& I, List& W, const int& n, const arma::vec& indzero, const arma::vec& indpos, const arma::mat igroup);
RcppExport SEXP _CDatanet_fgradvecTobit(SEXP thetaSEXP, SEXP XSEXP, SEXP logdetA2SEXP, SEXP alphatildeSEXP, SEXP G2SEXP, SEXP I2SEXP, SEXP KSEXP, SEXP ySEXP, SEXP GySEXP, SEXP idposSEXP, SEXP idzeroSEXP, SEXP ngroupSEXP, SEXP ISEXP, SEXP WSEXP, SEXP nSEXP, SEXP indzeroSEXP, SEXP indposSEXP, SEXP igroupSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type logdetA2(logdetA2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alphatilde(alphatildeSEXP);
    Rcpp::traits::input_parameter< List& >::type G2(G2SEXP);
    Rcpp::traits::input_parameter< List& >::type I2(I2SEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type idpos(idposSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type idzero(idzeroSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< List& >::type I(ISEXP);
    Rcpp::traits::input_parameter< List& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type indzero(indzeroSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type indpos(indposSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type igroup(igroupSEXP);
    rcpp_result_gen = Rcpp::wrap(fgradvecTobit(theta, X, logdetA2, alphatilde, G2, I2, K, y, Gy, idpos, idzero, ngroup, I, W, n, indzero, indpos, igroup));
    return rcpp_result_gen;
END_RCPP
}
// fcovSTC
List fcovSTC(const arma::vec& theta, const arma::mat& X, List& G2, List& I, List& W, const int& K, const int& n, const arma::vec& y, const arma::vec& Gy, const arma::vec& indzero, const arma::vec& indpos, const arma::mat& igroup, const int& ngroup, const bool& ccov);
RcppExport SEXP _CDatanet_fcovSTC(SEXP thetaSEXP, SEXP XSEXP, SEXP G2SEXP, SEXP ISEXP, SEXP WSEXP, SEXP KSEXP, SEXP nSEXP, SEXP ySEXP, SEXP GySEXP, SEXP indzeroSEXP, SEXP indposSEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP ccovSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< List& >::type G2(G2SEXP);
    Rcpp::traits::input_parameter< List& >::type I(ISEXP);
    Rcpp::traits::input_parameter< List& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type indzero(indzeroSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type indpos(indposSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const bool& >::type ccov(ccovSEXP);
    rcpp_result_gen = Rcpp::wrap(fcovSTC(theta, X, G2, I, W, K, n, y, Gy, indzero, indpos, igroup, ngroup, ccov));
    return rcpp_result_gen;
END_RCPP
}
// fybtbit
int fybtbit(arma::vec& yb, arma::vec& Gyb, List& G, const arma::mat& igroup, const int& ngroup, const arma::vec& psi, const double& lambda, const double& sigma, const int& n, const double& tol, const int& maxit);
RcppExport SEXP _CDatanet_fybtbit(SEXP ybSEXP, SEXP GybSEXP, SEXP GSEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP psiSEXP, SEXP lambdaSEXP, SEXP sigmaSEXP, SEXP nSEXP, SEXP tolSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type yb(ybSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Gyb(GybSEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(fybtbit(yb, Gyb, G, igroup, ngroup, psi, lambda, sigma, n, tol, maxit));
    return rcpp_result_gen;
END_RCPP
}
// foptimRE_TBT
double foptimRE_TBT(arma::vec& yb, arma::vec& Gyb, const arma::vec& theta, const arma::vec& yidpos, const arma::mat& X, List& G, const arma::mat& igroup, const int& ngroup, const int& npos, const arma::uvec& idpos, const arma::uvec& idzero, const int& K, const int& n, const double& tol, const int& maxit);
RcppExport SEXP _CDatanet_foptimRE_TBT(SEXP ybSEXP, SEXP GybSEXP, SEXP thetaSEXP, SEXP yidposSEXP, SEXP XSEXP, SEXP GSEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP nposSEXP, SEXP idposSEXP, SEXP idzeroSEXP, SEXP KSEXP, SEXP nSEXP, SEXP tolSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type yb(ybSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Gyb(GybSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type yidpos(yidposSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type npos(nposSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type idpos(idposSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type idzero(idzeroSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(foptimRE_TBT(yb, Gyb, theta, yidpos, X, G, igroup, ngroup, npos, idpos, idzero, K, n, tol, maxit));
    return rcpp_result_gen;
END_RCPP
}
// foptimTBT_NPL
double foptimTBT_NPL(const arma::vec& yidpos, const arma::vec& Gyb, const arma::mat& X, const arma::vec& theta, const int& npos, const arma::uvec& idpos, const arma::uvec& idzero, const int& K);
RcppExport SEXP _CDatanet_foptimTBT_NPL(SEXP yidposSEXP, SEXP GybSEXP, SEXP XSEXP, SEXP thetaSEXP, SEXP nposSEXP, SEXP idposSEXP, SEXP idzeroSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type yidpos(yidposSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gyb(GybSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const int& >::type npos(nposSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type idpos(idposSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type idzero(idzeroSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(foptimTBT_NPL(yidpos, Gyb, X, theta, npos, idpos, idzero, K));
    return rcpp_result_gen;
END_RCPP
}
// fLTBT_NPL
void fLTBT_NPL(arma::vec& yb, arma::vec& Gyb, List& G, const arma::mat& X, const arma::vec& theta, const arma::mat& igroup, const int& ngroup, const int& n, const int& K);
RcppExport SEXP _CDatanet_fLTBT_NPL(SEXP ybSEXP, SEXP GybSEXP, SEXP GSEXP, SEXP XSEXP, SEXP thetaSEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP nSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type yb(ybSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Gyb(GybSEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    fLTBT_NPL(yb, Gyb, G, X, theta, igroup, ngroup, n, K);
    return R_NilValue;
END_RCPP
}
// sartLBFGS
List sartLBFGS(Eigen::VectorXd par, const arma::vec& yidpos, const arma::vec& Gyb, const arma::mat& X, const int& npos, const arma::uvec& idpos, const arma::uvec& idzero, const int& K, const int& maxit, const double& eps_f, const double& eps_g, const bool& print);
RcppExport SEXP _CDatanet_sartLBFGS(SEXP parSEXP, SEXP yidposSEXP, SEXP GybSEXP, SEXP XSEXP, SEXP nposSEXP, SEXP idposSEXP, SEXP idzeroSEXP, SEXP KSEXP, SEXP maxitSEXP, SEXP eps_fSEXP, SEXP eps_gSEXP, SEXP printSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type par(parSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type yidpos(yidposSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gyb(GybSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int& >::type npos(nposSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type idpos(idposSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type idzero(idzeroSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps_f(eps_fSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps_g(eps_gSEXP);
    Rcpp::traits::input_parameter< const bool& >::type print(printSEXP);
    rcpp_result_gen = Rcpp::wrap(sartLBFGS(par, yidpos, Gyb, X, npos, idpos, idzero, K, maxit, eps_f, eps_g, print));
    return rcpp_result_gen;
END_RCPP
}
// fnewybTBT
void fnewybTBT(arma::vec& yb, arma::vec& Gyb, List& G, const arma::mat& igroup, const int& ngroup, const arma::mat& X, const arma::vec& theta, const int& K, const int& n, const double& tol, const int& maxit);
RcppExport SEXP _CDatanet_fnewybTBT(SEXP ybSEXP, SEXP GybSEXP, SEXP GSEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP XSEXP, SEXP thetaSEXP, SEXP KSEXP, SEXP nSEXP, SEXP tolSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type yb(ybSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Gyb(GybSEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    fnewybTBT(yb, Gyb, G, igroup, ngroup, X, theta, K, n, tol, maxit);
    return R_NilValue;
END_RCPP
}
// fcovSTI
List fcovSTI(const int& n, const arma::vec& Gyb, const arma::vec& theta, const arma::mat& X, const int& K, List& G, const arma::mat& igroup, const int& ngroup, const bool& ccov);
RcppExport SEXP _CDatanet_fcovSTI(SEXP nSEXP, SEXP GybSEXP, SEXP thetaSEXP, SEXP XSEXP, SEXP KSEXP, SEXP GSEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP ccovSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gyb(GybSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const bool& >::type ccov(ccovSEXP);
    rcpp_result_gen = Rcpp::wrap(fcovSTI(n, Gyb, theta, X, K, G, igroup, ngroup, ccov));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CDatanet_fL", (DL_FUNC) &_CDatanet_fL, 4},
    {"_CDatanet_fLncond", (DL_FUNC) &_CDatanet_fLncond, 5},
    {"_CDatanet_fyb", (DL_FUNC) &_CDatanet_fyb, 12},
    {"_CDatanet_fybncond", (DL_FUNC) &_CDatanet_fybncond, 13},
    {"_CDatanet_fy", (DL_FUNC) &_CDatanet_fy, 5},
    {"_CDatanet_fmeffects", (DL_FUNC) &_CDatanet_fmeffects, 5},
    {"_CDatanet_foptimREM", (DL_FUNC) &_CDatanet_foptimREM, 14},
    {"_CDatanet_foptimREMncond1", (DL_FUNC) &_CDatanet_foptimREMncond1, 16},
    {"_CDatanet_foptimREM_NPL", (DL_FUNC) &_CDatanet_foptimREM_NPL, 8},
    {"_CDatanet_fL_NPL", (DL_FUNC) &_CDatanet_fL_NPL, 10},
    {"_CDatanet_fnewyb", (DL_FUNC) &_CDatanet_fnewyb, 12},
    {"_CDatanet_foptimREM_NPLncond1", (DL_FUNC) &_CDatanet_foptimREM_NPLncond1, 10},
    {"_CDatanet_fL_NPLncond1", (DL_FUNC) &_CDatanet_fL_NPLncond1, 12},
    {"_CDatanet_foptimREM_NPLncond2", (DL_FUNC) &_CDatanet_foptimREM_NPLncond2, 11},
    {"_CDatanet_fL_NPLncond2", (DL_FUNC) &_CDatanet_fL_NPLncond2, 13},
    {"_CDatanet_flogintphi", (DL_FUNC) &_CDatanet_flogintphi, 8},
    {"_CDatanet_cdnetLBFGS", (DL_FUNC) &_CDatanet_cdnetLBFGS, 12},
    {"_CDatanet_fcovCDI", (DL_FUNC) &_CDatanet_fcovCDI, 11},
    {"_CDatanet_fL2", (DL_FUNC) &_CDatanet_fL2, 7},
    {"_CDatanet_fLncond2", (DL_FUNC) &_CDatanet_fLncond2, 8},
    {"_CDatanet_fyb2", (DL_FUNC) &_CDatanet_fyb2, 14},
    {"_CDatanet_fybncond2", (DL_FUNC) &_CDatanet_fybncond2, 15},
    {"_CDatanet_fy2", (DL_FUNC) &_CDatanet_fy2, 8},
    {"_CDatanet_fmeffects2", (DL_FUNC) &_CDatanet_fmeffects2, 8},
    {"_CDatanet_foptimREM2", (DL_FUNC) &_CDatanet_foptimREM2, 14},
    {"_CDatanet_foptimREMncond12", (DL_FUNC) &_CDatanet_foptimREMncond12, 16},
    {"_CDatanet_foptimREM_NPL2", (DL_FUNC) &_CDatanet_foptimREM_NPL2, 8},
    {"_CDatanet_fL_NPL2", (DL_FUNC) &_CDatanet_fL_NPL2, 10},
    {"_CDatanet_fnewyb2", (DL_FUNC) &_CDatanet_fnewyb2, 12},
    {"_CDatanet_foptimREM_NPLncond12", (DL_FUNC) &_CDatanet_foptimREM_NPLncond12, 10},
    {"_CDatanet_fL_NPLncond12", (DL_FUNC) &_CDatanet_fL_NPLncond12, 12},
    {"_CDatanet_foptimREM_NPLncond22", (DL_FUNC) &_CDatanet_foptimREM_NPLncond22, 11},
    {"_CDatanet_fL_NPLncond22", (DL_FUNC) &_CDatanet_fL_NPLncond22, 13},
    {"_CDatanet_cdnetLBFGSrho", (DL_FUNC) &_CDatanet_cdnetLBFGSrho, 12},
    {"_CDatanet_fcovCDI2", (DL_FUNC) &_CDatanet_fcovCDI2, 11},
    {"_CDatanet_fdummies", (DL_FUNC) &_CDatanet_fdummies, 4},
    {"_CDatanet_fmusum", (DL_FUNC) &_CDatanet_fmusum, 6},
    {"_CDatanet_updategparms1", (DL_FUNC) &_CDatanet_updategparms1, 20},
    {"_CDatanet_updategparms2", (DL_FUNC) &_CDatanet_updategparms2, 20},
    {"_CDatanet_fhomobeta", (DL_FUNC) &_CDatanet_fhomobeta, 10},
    {"_CDatanet_fhomobetap", (DL_FUNC) &_CDatanet_fhomobetap, 10},
    {"_CDatanet_fySar", (DL_FUNC) &_CDatanet_fySar, 8},
    {"_CDatanet_foptimSAR", (DL_FUNC) &_CDatanet_foptimSAR, 11},
    {"_CDatanet_fSARjac", (DL_FUNC) &_CDatanet_fSARjac, 12},
    {"_CDatanet_fybsar", (DL_FUNC) &_CDatanet_fybsar, 7},
    {"_CDatanet_foptimSAR_RE", (DL_FUNC) &_CDatanet_foptimSAR_RE, 10},
    {"_CDatanet_foptimSAR0_RE", (DL_FUNC) &_CDatanet_foptimSAR0_RE, 10},
    {"_CDatanet_fyTobit", (DL_FUNC) &_CDatanet_fyTobit, 13},
    {"_CDatanet_foptimTobit", (DL_FUNC) &_CDatanet_foptimTobit, 17},
    {"_CDatanet_foptimTobit0", (DL_FUNC) &_CDatanet_foptimTobit0, 17},
    {"_CDatanet_fgradvecTobit", (DL_FUNC) &_CDatanet_fgradvecTobit, 18},
    {"_CDatanet_fcovSTC", (DL_FUNC) &_CDatanet_fcovSTC, 14},
    {"_CDatanet_fybtbit", (DL_FUNC) &_CDatanet_fybtbit, 11},
    {"_CDatanet_foptimRE_TBT", (DL_FUNC) &_CDatanet_foptimRE_TBT, 15},
    {"_CDatanet_foptimTBT_NPL", (DL_FUNC) &_CDatanet_foptimTBT_NPL, 8},
    {"_CDatanet_fLTBT_NPL", (DL_FUNC) &_CDatanet_fLTBT_NPL, 9},
    {"_CDatanet_sartLBFGS", (DL_FUNC) &_CDatanet_sartLBFGS, 12},
    {"_CDatanet_fnewybTBT", (DL_FUNC) &_CDatanet_fnewybTBT, 11},
    {"_CDatanet_fcovSTI", (DL_FUNC) &_CDatanet_fcovSTI, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_CDatanet(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
