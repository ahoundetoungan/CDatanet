// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// simG
List simG(List& dnetwork, const arma::vec& N, const int& M);
RcppExport SEXP _CDatanet_simG(SEXP dnetworkSEXP, SEXP NSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List& >::type dnetwork(dnetworkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(simG(dnetwork, N, M));
    return rcpp_result_gen;
END_RCPP
}
// simGnorm
List simGnorm(List& dnetwork, const arma::vec& N, const int& M);
RcppExport SEXP _CDatanet_simGnorm(SEXP dnetworkSEXP, SEXP NSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List& >::type dnetwork(dnetworkSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(simGnorm(dnetwork, N, M));
    return rcpp_result_gen;
END_RCPP
}
// fGnormalise
List fGnormalise(List& u, const double& M);
RcppExport SEXP _CDatanet_fGnormalise(SEXP uSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const double& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(fGnormalise(u, M));
    return rcpp_result_gen;
END_RCPP
}
// rem_non_fin
List rem_non_fin(const arma::mat& net);
RcppExport SEXP _CDatanet_rem_non_fin(SEXP netSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type net(netSEXP);
    rcpp_result_gen = Rcpp::wrap(rem_non_fin(net));
    return rcpp_result_gen;
END_RCPP
}
// frVtoM
List frVtoM(const Eigen::VectorXd& u, const Rcpp::IntegerVector& N, const double& M);
RcppExport SEXP _CDatanet_frVtoM(SEXP uSEXP, SEXP NSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const double& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(frVtoM(u, N, M));
    return rcpp_result_gen;
END_RCPP
}
// frVtoMnorm
List frVtoMnorm(const arma::vec& u, const IntegerVector& N, const double& M);
RcppExport SEXP _CDatanet_frVtoMnorm(SEXP uSEXP, SEXP NSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const double& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(frVtoMnorm(u, N, M));
    return rcpp_result_gen;
END_RCPP
}
// frMtoV
Eigen::VectorXd frMtoV(List& u, const Rcpp::IntegerVector& N, const double& M);
RcppExport SEXP _CDatanet_frMtoV(SEXP uSEXP, SEXP NSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const double& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(frMtoV(u, N, M));
    return rcpp_result_gen;
END_RCPP
}
// frMceiltoV
Eigen::VectorXd frMceiltoV(List& u, const Rcpp::IntegerVector& N, const double& M);
RcppExport SEXP _CDatanet_frMceiltoV(SEXP uSEXP, SEXP NSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const double& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(frMceiltoV(u, N, M));
    return rcpp_result_gen;
END_RCPP
}
// fcdlambdat
arma::vec fcdlambdat(const arma::vec& lambda, const int& nCa, const double& a, const double& b);
RcppExport SEXP _CDatanet_fcdlambdat(SEXP lambdaSEXP, SEXP nCaSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const int& >::type nCa(nCaSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(fcdlambdat(lambda, nCa, a, b));
    return rcpp_result_gen;
END_RCPP
}
// fcddlambdat
arma::mat fcddlambdat(const arma::vec& lambda, const int& nCa, const double& a, const double& b);
RcppExport SEXP _CDatanet_fcddlambdat(SEXP lambdaSEXP, SEXP nCaSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const int& >::type nCa(nCaSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(fcddlambdat(lambda, nCa, a, b));
    return rcpp_result_gen;
END_RCPP
}
// fcdlambda
arma::vec fcdlambda(const arma::vec& lambdat, const int& nCa, const double& a, const double& b);
RcppExport SEXP _CDatanet_fcdlambda(SEXP lambdatSEXP, SEXP nCaSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type lambdat(lambdatSEXP);
    Rcpp::traits::input_parameter< const int& >::type nCa(nCaSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(fcdlambda(lambdat, nCa, a, b));
    return rcpp_result_gen;
END_RCPP
}
// fcddlambda
arma::mat fcddlambda(const arma::vec& lambda, const int& nCa, const double& a, const double& b);
RcppExport SEXP _CDatanet_fcddlambda(SEXP lambdaSEXP, SEXP nCaSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const int& >::type nCa(nCaSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(fcddlambda(lambda, nCa, a, b));
    return rcpp_result_gen;
END_RCPP
}
// fL
arma::vec fL(const arma::vec& ZtLambda, List& lCa, const int& nCa, const arma::vec& delta, const arma::umat& idelta, const arma::vec& Rbar, const double& R, const arma::vec& n, const int sumn);
RcppExport SEXP _CDatanet_fL(SEXP ZtLambdaSEXP, SEXP lCaSEXP, SEXP nCaSEXP, SEXP deltaSEXP, SEXP ideltaSEXP, SEXP RbarSEXP, SEXP RSEXP, SEXP nSEXP, SEXP sumnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ZtLambda(ZtLambdaSEXP);
    Rcpp::traits::input_parameter< List& >::type lCa(lCaSEXP);
    Rcpp::traits::input_parameter< const int& >::type nCa(nCaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type idelta(ideltaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Rbar(RbarSEXP);
    Rcpp::traits::input_parameter< const double& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int >::type sumn(sumnSEXP);
    rcpp_result_gen = Rcpp::wrap(fL(ZtLambda, lCa, nCa, delta, idelta, Rbar, R, n, sumn));
    return rcpp_result_gen;
END_RCPP
}
// fLncond
arma::vec fLncond(const arma::mat& ZtLambda, List& lCa, const int& nCa, const arma::mat& delta, const arma::umat& idelta, const arma::vec& Rbar, const double& R, const arma::vec& n, const int sumn, const int& nsimu);
RcppExport SEXP _CDatanet_fLncond(SEXP ZtLambdaSEXP, SEXP lCaSEXP, SEXP nCaSEXP, SEXP deltaSEXP, SEXP ideltaSEXP, SEXP RbarSEXP, SEXP RSEXP, SEXP nSEXP, SEXP sumnSEXP, SEXP nsimuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type ZtLambda(ZtLambdaSEXP);
    Rcpp::traits::input_parameter< List& >::type lCa(lCaSEXP);
    Rcpp::traits::input_parameter< const int& >::type nCa(nCaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type idelta(ideltaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Rbar(RbarSEXP);
    Rcpp::traits::input_parameter< const double& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int >::type sumn(sumnSEXP);
    Rcpp::traits::input_parameter< const int& >::type nsimu(nsimuSEXP);
    rcpp_result_gen = Rcpp::wrap(fLncond(ZtLambda, lCa, nCa, delta, idelta, Rbar, R, n, sumn, nsimu));
    return rcpp_result_gen;
END_RCPP
}
// fye
int fye(arma::vec& ye, arma::mat& Gye, List& G, List& lCa, const int& nCa, const arma::mat& igroup, const int& ngroup, const arma::vec& psi, const arma::vec& lambda, const arma::vec& delta, const arma::umat& idelta, const arma::vec& n, const int sumn, const arma::vec& Rbar, const double& R, const double& tol, const int& maxit);
RcppExport SEXP _CDatanet_fye(SEXP yeSEXP, SEXP GyeSEXP, SEXP GSEXP, SEXP lCaSEXP, SEXP nCaSEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP psiSEXP, SEXP lambdaSEXP, SEXP deltaSEXP, SEXP ideltaSEXP, SEXP nSEXP, SEXP sumnSEXP, SEXP RbarSEXP, SEXP RSEXP, SEXP tolSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type ye(yeSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Gye(GyeSEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< List& >::type lCa(lCaSEXP);
    Rcpp::traits::input_parameter< const int& >::type nCa(nCaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type idelta(ideltaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int >::type sumn(sumnSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Rbar(RbarSEXP);
    Rcpp::traits::input_parameter< const double& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(fye(ye, Gye, G, lCa, nCa, igroup, ngroup, psi, lambda, delta, idelta, n, sumn, Rbar, R, tol, maxit));
    return rcpp_result_gen;
END_RCPP
}
// fyencond
int fyencond(arma::vec& ye, arma::mat& Gye, List& G, List& lCa, const int& nCa, const arma::mat& igroup, const int& ngroup, const arma::mat& psi, const double& lambda, const arma::vec& delta, const arma::umat& idelta, const arma::vec& n, const int sumn, const int& nsimu, const arma::vec& Rbar, const double& R, const double& tol, const int& maxit);
RcppExport SEXP _CDatanet_fyencond(SEXP yeSEXP, SEXP GyeSEXP, SEXP GSEXP, SEXP lCaSEXP, SEXP nCaSEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP psiSEXP, SEXP lambdaSEXP, SEXP deltaSEXP, SEXP ideltaSEXP, SEXP nSEXP, SEXP sumnSEXP, SEXP nsimuSEXP, SEXP RbarSEXP, SEXP RSEXP, SEXP tolSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type ye(yeSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Gye(GyeSEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< List& >::type lCa(lCaSEXP);
    Rcpp::traits::input_parameter< const int& >::type nCa(nCaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type idelta(ideltaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int >::type sumn(sumnSEXP);
    Rcpp::traits::input_parameter< const int& >::type nsimu(nsimuSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Rbar(RbarSEXP);
    Rcpp::traits::input_parameter< const double& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(fyencond(ye, Gye, G, lCa, nCa, igroup, ngroup, psi, lambda, delta, idelta, n, sumn, nsimu, Rbar, R, tol, maxit));
    return rcpp_result_gen;
END_RCPP
}
// fy
arma::vec fy(const arma::vec& yst, const arma::vec& maxyst, List& lCa, const int& nCa, const arma::vec& delta, const arma::umat& idelta, const arma::vec& n, const int& sumn, const arma::vec& Rbar, const double& R);
RcppExport SEXP _CDatanet_fy(SEXP ystSEXP, SEXP maxystSEXP, SEXP lCaSEXP, SEXP nCaSEXP, SEXP deltaSEXP, SEXP ideltaSEXP, SEXP nSEXP, SEXP sumnSEXP, SEXP RbarSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type yst(ystSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type maxyst(maxystSEXP);
    Rcpp::traits::input_parameter< List& >::type lCa(lCaSEXP);
    Rcpp::traits::input_parameter< const int& >::type nCa(nCaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type idelta(ideltaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int& >::type sumn(sumnSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Rbar(RbarSEXP);
    Rcpp::traits::input_parameter< const double& >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(fy(yst, maxyst, lCa, nCa, delta, idelta, n, sumn, Rbar, R));
    return rcpp_result_gen;
END_RCPP
}
// fmeffects
List fmeffects(const arma::vec& ZtLambda, const arma::vec& lambda, const arma::vec& Gamma2, List& lCa, const int& nCa, const arma::vec& delta, const arma::umat& idelta, const int& sumn, const arma::vec& Rbar, const double& R);
RcppExport SEXP _CDatanet_fmeffects(SEXP ZtLambdaSEXP, SEXP lambdaSEXP, SEXP Gamma2SEXP, SEXP lCaSEXP, SEXP nCaSEXP, SEXP deltaSEXP, SEXP ideltaSEXP, SEXP sumnSEXP, SEXP RbarSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ZtLambda(ZtLambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gamma2(Gamma2SEXP);
    Rcpp::traits::input_parameter< List& >::type lCa(lCaSEXP);
    Rcpp::traits::input_parameter< const int& >::type nCa(nCaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type idelta(ideltaSEXP);
    Rcpp::traits::input_parameter< const int& >::type sumn(sumnSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Rbar(RbarSEXP);
    Rcpp::traits::input_parameter< const double& >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(fmeffects(ZtLambda, lambda, Gamma2, lCa, nCa, delta, idelta, sumn, Rbar, R));
    return rcpp_result_gen;
END_RCPP
}
// fdelta
arma::vec fdelta(const arma::vec& deltat, const arma::vec& lambda, const arma::umat& idelta, const arma::uvec& ndelta, const int& nCa);
RcppExport SEXP _CDatanet_fdelta(SEXP deltatSEXP, SEXP lambdaSEXP, SEXP ideltaSEXP, SEXP ndeltaSEXP, SEXP nCaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type deltat(deltatSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type idelta(ideltaSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type ndelta(ndeltaSEXP);
    Rcpp::traits::input_parameter< const int& >::type nCa(nCaSEXP);
    rcpp_result_gen = Rcpp::wrap(fdelta(deltat, lambda, idelta, ndelta, nCa));
    return rcpp_result_gen;
END_RCPP
}
// foptimREM
double foptimREM(arma::vec& ye, arma::mat& Gye, const arma::vec& theta, const double& lb_sl, const double& ub_sl, const arma::mat& X, List& G, List& lCa, const int& nCa, const arma::mat& igroup, const int& ngroup, const int& K, const arma::vec& n, const int sumn, const arma::vec& Rbar, const double& R, const arma::umat& idelta, const arma::uvec& ndelta, const arma::uvec& y, const arma::vec& maxy, const double& tol, const int& maxit);
RcppExport SEXP _CDatanet_foptimREM(SEXP yeSEXP, SEXP GyeSEXP, SEXP thetaSEXP, SEXP lb_slSEXP, SEXP ub_slSEXP, SEXP XSEXP, SEXP GSEXP, SEXP lCaSEXP, SEXP nCaSEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP KSEXP, SEXP nSEXP, SEXP sumnSEXP, SEXP RbarSEXP, SEXP RSEXP, SEXP ideltaSEXP, SEXP ndeltaSEXP, SEXP ySEXP, SEXP maxySEXP, SEXP tolSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type ye(yeSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Gye(GyeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double& >::type lb_sl(lb_slSEXP);
    Rcpp::traits::input_parameter< const double& >::type ub_sl(ub_slSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< List& >::type lCa(lCaSEXP);
    Rcpp::traits::input_parameter< const int& >::type nCa(nCaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int >::type sumn(sumnSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Rbar(RbarSEXP);
    Rcpp::traits::input_parameter< const double& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type idelta(ideltaSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type ndelta(ndeltaSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type maxy(maxySEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(foptimREM(ye, Gye, theta, lb_sl, ub_sl, X, G, lCa, nCa, igroup, ngroup, K, n, sumn, Rbar, R, idelta, ndelta, y, maxy, tol, maxit));
    return rcpp_result_gen;
END_RCPP
}
// foptimREM_NPL
double foptimREM_NPL(const arma::mat& Gye, const arma::vec& theta, const double& lb_sl, const double& ub_sl, const arma::mat& X, List& lCa, const int& nCa, const int& K, const arma::vec& n, const int sumn, const arma::umat& idelta, const arma::uvec& ndelta, const arma::vec& Rbar, const double& R, const arma::uvec& y, const arma::vec& maxy, const bool& print);
RcppExport SEXP _CDatanet_foptimREM_NPL(SEXP GyeSEXP, SEXP thetaSEXP, SEXP lb_slSEXP, SEXP ub_slSEXP, SEXP XSEXP, SEXP lCaSEXP, SEXP nCaSEXP, SEXP KSEXP, SEXP nSEXP, SEXP sumnSEXP, SEXP ideltaSEXP, SEXP ndeltaSEXP, SEXP RbarSEXP, SEXP RSEXP, SEXP ySEXP, SEXP maxySEXP, SEXP printSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Gye(GyeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double& >::type lb_sl(lb_slSEXP);
    Rcpp::traits::input_parameter< const double& >::type ub_sl(ub_slSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< List& >::type lCa(lCaSEXP);
    Rcpp::traits::input_parameter< const int& >::type nCa(nCaSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int >::type sumn(sumnSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type idelta(ideltaSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type ndelta(ndeltaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Rbar(RbarSEXP);
    Rcpp::traits::input_parameter< const double& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type maxy(maxySEXP);
    Rcpp::traits::input_parameter< const bool& >::type print(printSEXP);
    rcpp_result_gen = Rcpp::wrap(foptimREM_NPL(Gye, theta, lb_sl, ub_sl, X, lCa, nCa, K, n, sumn, idelta, ndelta, Rbar, R, y, maxy, print));
    return rcpp_result_gen;
END_RCPP
}
// fL_NPL
void fL_NPL(arma::vec& ye, arma::mat& Gye, const arma::vec& theta, const arma::mat& X, List& G, List& lCa, const int& nCa, const arma::mat& igroup, const int& ngroup, const int& K, const arma::vec& n, const int sumn, const arma::umat& idelta, const arma::uvec& ndelta, const arma::vec& Rbar, const double& R);
RcppExport SEXP _CDatanet_fL_NPL(SEXP yeSEXP, SEXP GyeSEXP, SEXP thetaSEXP, SEXP XSEXP, SEXP GSEXP, SEXP lCaSEXP, SEXP nCaSEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP KSEXP, SEXP nSEXP, SEXP sumnSEXP, SEXP ideltaSEXP, SEXP ndeltaSEXP, SEXP RbarSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type ye(yeSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Gye(GyeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< List& >::type lCa(lCaSEXP);
    Rcpp::traits::input_parameter< const int& >::type nCa(nCaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int >::type sumn(sumnSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type idelta(ideltaSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type ndelta(ndeltaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Rbar(RbarSEXP);
    Rcpp::traits::input_parameter< const double& >::type R(RSEXP);
    fL_NPL(ye, Gye, theta, X, G, lCa, nCa, igroup, ngroup, K, n, sumn, idelta, ndelta, Rbar, R);
    return R_NilValue;
END_RCPP
}
// fnewye
void fnewye(arma::vec& ye, arma::mat& Gye, const arma::vec& theta, const arma::mat& X, List& G, List& lCa, const int& nCa, const arma::mat& igroup, const int& ngroup, const int& K, const arma::vec& n, const int sumn, const arma::umat& idelta, const arma::uvec& ndelta, const arma::vec& Rbar, const double& R, const double& tol, const int& maxit);
RcppExport SEXP _CDatanet_fnewye(SEXP yeSEXP, SEXP GyeSEXP, SEXP thetaSEXP, SEXP XSEXP, SEXP GSEXP, SEXP lCaSEXP, SEXP nCaSEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP KSEXP, SEXP nSEXP, SEXP sumnSEXP, SEXP ideltaSEXP, SEXP ndeltaSEXP, SEXP RbarSEXP, SEXP RSEXP, SEXP tolSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type ye(yeSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Gye(GyeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< List& >::type lCa(lCaSEXP);
    Rcpp::traits::input_parameter< const int& >::type nCa(nCaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int >::type sumn(sumnSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type idelta(ideltaSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type ndelta(ndeltaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Rbar(RbarSEXP);
    Rcpp::traits::input_parameter< const double& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    fnewye(ye, Gye, theta, X, G, lCa, nCa, igroup, ngroup, K, n, sumn, idelta, ndelta, Rbar, R, tol, maxit);
    return R_NilValue;
END_RCPP
}
// cdnetLBFGS
List cdnetLBFGS(Eigen::VectorXd par, const double& lb_sl, const double& ub_sl, const arma::mat& Gye, const arma::mat& X, List& lCa, const int& nCa, const arma::vec& n, const int sumn, const arma::umat& idelta, const arma::uvec& ndelta, const arma::vec& Rbar, const double& R, const arma::vec& maxy, const int& K, const arma::uvec& y, const int& maxit, const double& eps_f, const double& eps_g, const bool& print);
RcppExport SEXP _CDatanet_cdnetLBFGS(SEXP parSEXP, SEXP lb_slSEXP, SEXP ub_slSEXP, SEXP GyeSEXP, SEXP XSEXP, SEXP lCaSEXP, SEXP nCaSEXP, SEXP nSEXP, SEXP sumnSEXP, SEXP ideltaSEXP, SEXP ndeltaSEXP, SEXP RbarSEXP, SEXP RSEXP, SEXP maxySEXP, SEXP KSEXP, SEXP ySEXP, SEXP maxitSEXP, SEXP eps_fSEXP, SEXP eps_gSEXP, SEXP printSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type par(parSEXP);
    Rcpp::traits::input_parameter< const double& >::type lb_sl(lb_slSEXP);
    Rcpp::traits::input_parameter< const double& >::type ub_sl(ub_slSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Gye(GyeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< List& >::type lCa(lCaSEXP);
    Rcpp::traits::input_parameter< const int& >::type nCa(nCaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int >::type sumn(sumnSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type idelta(ideltaSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type ndelta(ndeltaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Rbar(RbarSEXP);
    Rcpp::traits::input_parameter< const double& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type maxy(maxySEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps_f(eps_fSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps_g(eps_gSEXP);
    Rcpp::traits::input_parameter< const bool& >::type print(printSEXP);
    rcpp_result_gen = Rcpp::wrap(cdnetLBFGS(par, lb_sl, ub_sl, Gye, X, lCa, nCa, n, sumn, idelta, ndelta, Rbar, R, maxy, K, y, maxit, eps_f, eps_g, print));
    return rcpp_result_gen;
END_RCPP
}
// flogintphi
arma::vec flogintphi(const arma::vec& Mean, List& lCa, const int& nCa, const arma::vec& a, const arma::vec& b, const int& sumn, const int& S, const arma::rowvec& simu);
RcppExport SEXP _CDatanet_flogintphi(SEXP MeanSEXP, SEXP lCaSEXP, SEXP nCaSEXP, SEXP aSEXP, SEXP bSEXP, SEXP sumnSEXP, SEXP SSEXP, SEXP simuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Mean(MeanSEXP);
    Rcpp::traits::input_parameter< List& >::type lCa(lCaSEXP);
    Rcpp::traits::input_parameter< const int& >::type nCa(nCaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const int& >::type sumn(sumnSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type simu(simuSEXP);
    rcpp_result_gen = Rcpp::wrap(flogintphi(Mean, lCa, nCa, a, b, sumn, S, simu));
    return rcpp_result_gen;
END_RCPP
}
// fcovCDI
List fcovCDI(const arma::vec& theta, const arma::vec& Gamma2, const arma::mat& Gye, const arma::mat& X, const arma::uvec ixWi, List& G, List& lCa, const int& nCa, const arma::mat& igroup, const int& ngroup, const int& K, const arma::vec& n, const int sumn, const arma::umat& idelta, const arma::uvec& ndelta, const arma::vec& Rbar, const double& R, const int& S, const bool& ccov);
RcppExport SEXP _CDatanet_fcovCDI(SEXP thetaSEXP, SEXP Gamma2SEXP, SEXP GyeSEXP, SEXP XSEXP, SEXP ixWiSEXP, SEXP GSEXP, SEXP lCaSEXP, SEXP nCaSEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP KSEXP, SEXP nSEXP, SEXP sumnSEXP, SEXP ideltaSEXP, SEXP ndeltaSEXP, SEXP RbarSEXP, SEXP RSEXP, SEXP SSEXP, SEXP ccovSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gamma2(Gamma2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Gye(GyeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type ixWi(ixWiSEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< List& >::type lCa(lCaSEXP);
    Rcpp::traits::input_parameter< const int& >::type nCa(nCaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int >::type sumn(sumnSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type idelta(ideltaSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type ndelta(ndeltaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Rbar(RbarSEXP);
    Rcpp::traits::input_parameter< const double& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const bool& >::type ccov(ccovSEXP);
    rcpp_result_gen = Rcpp::wrap(fcovCDI(theta, Gamma2, Gye, X, ixWi, G, lCa, nCa, igroup, ngroup, K, n, sumn, idelta, ndelta, Rbar, R, S, ccov));
    return rcpp_result_gen;
END_RCPP
}
// fcddEy
arma::mat fcddEy(const arma::vec& theta, const arma::mat& Gye, const arma::mat& X, const arma::vec& psi, List& G, List& lCa, const int& nCa, const arma::mat& igroup, const int& ngroup, const int& K, const arma::vec& n, const int sumn, const arma::umat& idelta, const arma::uvec& ndelta, const arma::vec& Rbar, const double& R, const int& S);
RcppExport SEXP _CDatanet_fcddEy(SEXP thetaSEXP, SEXP GyeSEXP, SEXP XSEXP, SEXP psiSEXP, SEXP GSEXP, SEXP lCaSEXP, SEXP nCaSEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP KSEXP, SEXP nSEXP, SEXP sumnSEXP, SEXP ideltaSEXP, SEXP ndeltaSEXP, SEXP RbarSEXP, SEXP RSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Gye(GyeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< List& >::type lCa(lCaSEXP);
    Rcpp::traits::input_parameter< const int& >::type nCa(nCaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int >::type sumn(sumnSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type idelta(ideltaSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type ndelta(ndeltaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Rbar(RbarSEXP);
    Rcpp::traits::input_parameter< const double& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(fcddEy(theta, Gye, X, psi, G, lCa, nCa, igroup, ngroup, K, n, sumn, idelta, ndelta, Rbar, R, S));
    return rcpp_result_gen;
END_RCPP
}
// fdummies
void fdummies(arma::mat& out, const arma::mat& limit, const int& M, const int& n);
RcppExport SEXP _CDatanet_fdummies(SEXP outSEXP, SEXP limitSEXP, SEXP MSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type out(outSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type limit(limitSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    fdummies(out, limit, M, n);
    return R_NilValue;
END_RCPP
}
// fdatar
arma::cube fdatar(const arma::mat X, List ftovar, const int& nvar, const int& K);
RcppExport SEXP _CDatanet_fdatar(SEXP XSEXP, SEXP ftovarSEXP, SEXP nvarSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< List >::type ftovar(ftovarSEXP);
    Rcpp::traits::input_parameter< const int& >::type nvar(nvarSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(fdatar(X, ftovar, nvar, K));
    return rcpp_result_gen;
END_RCPP
}
// frMtoVbyCOL
Eigen::VectorXd frMtoVbyCOL(List& u, const Rcpp::IntegerVector& N, const double& M);
RcppExport SEXP _CDatanet_frMtoVbyCOL(SEXP uSEXP, SEXP NSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const double& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(frMtoVbyCOL(u, N, M));
    return rcpp_result_gen;
END_RCPP
}
// frMtoVbyCOLsym
Eigen::VectorXd frMtoVbyCOLsym(List& u, const Rcpp::IntegerVector& N, const double& M);
RcppExport SEXP _CDatanet_frMtoVbyCOLsym(SEXP uSEXP, SEXP NSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const double& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(frMtoVbyCOLsym(u, N, M));
    return rcpp_result_gen;
END_RCPP
}
// fmusum
arma::vec fmusum(const arma::vec& mu, const arma::vec& nu, const arma::mat& index, const arma::mat& indexgr, const int& M, const int& N);
RcppExport SEXP _CDatanet_fmusum(SEXP muSEXP, SEXP nuSEXP, SEXP indexSEXP, SEXP indexgrSEXP, SEXP MSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type index(indexSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type indexgr(indexgrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(fmusum(mu, nu, index, indexgr, M, N));
    return rcpp_result_gen;
END_RCPP
}
// fmusumsym
arma::vec fmusumsym(const arma::vec& mu, const arma::mat& index, const arma::mat& indexgr, const int& M, const int& N);
RcppExport SEXP _CDatanet_fmusumsym(SEXP muSEXP, SEXP indexSEXP, SEXP indexgrSEXP, SEXP MSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type index(indexSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type indexgr(indexgrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(fmusumsym(mu, index, indexgr, M, N));
    return rcpp_result_gen;
END_RCPP
}
// bayesmunu
List bayesmunu(const arma::vec& a, const arma::mat& dx, const arma::mat& invdxdx, const arma::vec& beta0, const arma::vec& mu0, const arma::vec& nu0, const double& smu20, const double& snu20, const double& rho0, const arma::mat& index, const arma::mat& indexgr, const arma::mat& INDEXgr, const int& nfix, const int& N, const int& M, const int& K, const int& Kx, const arma::vec& nvec, const int& n, const int& iteration, const bool& Print);
RcppExport SEXP _CDatanet_bayesmunu(SEXP aSEXP, SEXP dxSEXP, SEXP invdxdxSEXP, SEXP beta0SEXP, SEXP mu0SEXP, SEXP nu0SEXP, SEXP smu20SEXP, SEXP snu20SEXP, SEXP rho0SEXP, SEXP indexSEXP, SEXP indexgrSEXP, SEXP INDEXgrSEXP, SEXP nfixSEXP, SEXP NSEXP, SEXP MSEXP, SEXP KSEXP, SEXP KxSEXP, SEXP nvecSEXP, SEXP nSEXP, SEXP iterationSEXP, SEXP PrintSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dx(dxSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type invdxdx(invdxdxSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type nu0(nu0SEXP);
    Rcpp::traits::input_parameter< const double& >::type smu20(smu20SEXP);
    Rcpp::traits::input_parameter< const double& >::type snu20(snu20SEXP);
    Rcpp::traits::input_parameter< const double& >::type rho0(rho0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type index(indexSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type indexgr(indexgrSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type INDEXgr(INDEXgrSEXP);
    Rcpp::traits::input_parameter< const int& >::type nfix(nfixSEXP);
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx(KxSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type nvec(nvecSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int& >::type iteration(iterationSEXP);
    Rcpp::traits::input_parameter< const bool& >::type Print(PrintSEXP);
    rcpp_result_gen = Rcpp::wrap(bayesmunu(a, dx, invdxdx, beta0, mu0, nu0, smu20, snu20, rho0, index, indexgr, INDEXgr, nfix, N, M, K, Kx, nvec, n, iteration, Print));
    return rcpp_result_gen;
END_RCPP
}
// bayesmu
List bayesmu(const arma::vec& a, const arma::mat& dx, const arma::mat& invdxdx, const arma::vec& beta0, const arma::vec& mu0, const double& smu20, const arma::mat& index, const arma::mat& indexgr, const arma::mat& INDEXgr, const int& nfix, const int& N, const int& M, const int& K, const int& Kx, const arma::vec& nvec, const int& n, const int& iteration, const bool& sym, const bool& Print);
RcppExport SEXP _CDatanet_bayesmu(SEXP aSEXP, SEXP dxSEXP, SEXP invdxdxSEXP, SEXP beta0SEXP, SEXP mu0SEXP, SEXP smu20SEXP, SEXP indexSEXP, SEXP indexgrSEXP, SEXP INDEXgrSEXP, SEXP nfixSEXP, SEXP NSEXP, SEXP MSEXP, SEXP KSEXP, SEXP KxSEXP, SEXP nvecSEXP, SEXP nSEXP, SEXP iterationSEXP, SEXP symSEXP, SEXP PrintSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dx(dxSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type invdxdx(invdxdxSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const double& >::type smu20(smu20SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type index(indexSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type indexgr(indexgrSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type INDEXgr(INDEXgrSEXP);
    Rcpp::traits::input_parameter< const int& >::type nfix(nfixSEXP);
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type Kx(KxSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type nvec(nvecSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int& >::type iteration(iterationSEXP);
    Rcpp::traits::input_parameter< const bool& >::type sym(symSEXP);
    Rcpp::traits::input_parameter< const bool& >::type Print(PrintSEXP);
    rcpp_result_gen = Rcpp::wrap(bayesmu(a, dx, invdxdx, beta0, mu0, smu20, index, indexgr, INDEXgr, nfix, N, M, K, Kx, nvec, n, iteration, sym, Print));
    return rcpp_result_gen;
END_RCPP
}
// fhomobeta2f
List fhomobeta2f(Eigen::VectorXd theta, const arma::vec& a, const arma::mat& dx, const arma::vec& nvec, const arma::mat& index, const arma::mat& indexgr, const int& M, const int maxit, const double& eps_f, const double& eps_g, const bool& hasX, const bool& Print);
RcppExport SEXP _CDatanet_fhomobeta2f(SEXP thetaSEXP, SEXP aSEXP, SEXP dxSEXP, SEXP nvecSEXP, SEXP indexSEXP, SEXP indexgrSEXP, SEXP MSEXP, SEXP maxitSEXP, SEXP eps_fSEXP, SEXP eps_gSEXP, SEXP hasXSEXP, SEXP PrintSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dx(dxSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type nvec(nvecSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type index(indexSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type indexgr(indexgrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps_f(eps_fSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps_g(eps_gSEXP);
    Rcpp::traits::input_parameter< const bool& >::type hasX(hasXSEXP);
    Rcpp::traits::input_parameter< const bool& >::type Print(PrintSEXP);
    rcpp_result_gen = Rcpp::wrap(fhomobeta2f(theta, a, dx, nvec, index, indexgr, M, maxit, eps_f, eps_g, hasX, Print));
    return rcpp_result_gen;
END_RCPP
}
// fhomobeta1f
List fhomobeta1f(Eigen::VectorXd theta, const arma::vec& a, const arma::mat& dx, const arma::vec& nvec, const arma::mat& index, const arma::mat& indexgr, const int& M, const int maxit, const double& eps_f, const double& eps_g, const bool& hasX, const bool& Print);
RcppExport SEXP _CDatanet_fhomobeta1f(SEXP thetaSEXP, SEXP aSEXP, SEXP dxSEXP, SEXP nvecSEXP, SEXP indexSEXP, SEXP indexgrSEXP, SEXP MSEXP, SEXP maxitSEXP, SEXP eps_fSEXP, SEXP eps_gSEXP, SEXP hasXSEXP, SEXP PrintSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dx(dxSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type nvec(nvecSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type index(indexSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type indexgr(indexgrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps_f(eps_fSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps_g(eps_gSEXP);
    Rcpp::traits::input_parameter< const bool& >::type hasX(hasXSEXP);
    Rcpp::traits::input_parameter< const bool& >::type Print(PrintSEXP);
    rcpp_result_gen = Rcpp::wrap(fhomobeta1f(theta, a, dx, nvec, index, indexgr, M, maxit, eps_f, eps_g, hasX, Print));
    return rcpp_result_gen;
END_RCPP
}
// fhomobetasym
List fhomobetasym(Eigen::VectorXd theta, const arma::vec& a, const arma::mat& dx, const arma::vec& nvec, const arma::mat& index, const arma::mat& indexgr, const int& M, const int maxit, const double& eps_f, const double& eps_g, const bool& hasX, const bool& Print);
RcppExport SEXP _CDatanet_fhomobetasym(SEXP thetaSEXP, SEXP aSEXP, SEXP dxSEXP, SEXP nvecSEXP, SEXP indexSEXP, SEXP indexgrSEXP, SEXP MSEXP, SEXP maxitSEXP, SEXP eps_fSEXP, SEXP eps_gSEXP, SEXP hasXSEXP, SEXP PrintSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dx(dxSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type nvec(nvecSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type index(indexSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type indexgr(indexgrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps_f(eps_fSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps_g(eps_gSEXP);
    Rcpp::traits::input_parameter< const bool& >::type hasX(hasXSEXP);
    Rcpp::traits::input_parameter< const bool& >::type Print(PrintSEXP);
    rcpp_result_gen = Rcpp::wrap(fhomobetasym(theta, a, dx, nvec, index, indexgr, M, maxit, eps_f, eps_g, hasX, Print));
    return rcpp_result_gen;
END_RCPP
}
// hdataF2L
arma::mat hdataF2L(const arma::mat& data, const arma::vec& nvec, const arma::mat& index, const int& M);
RcppExport SEXP _CDatanet_hdataF2L(SEXP dataSEXP, SEXP nvecSEXP, SEXP indexSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type nvec(nvecSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type index(indexSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(hdataF2L(data, nvec, index, M));
    return rcpp_result_gen;
END_RCPP
}
// hdataF2U
arma::mat hdataF2U(const arma::mat& data, const arma::vec& nvec, const arma::mat& index, const arma::mat& indexgr, const int& M);
RcppExport SEXP _CDatanet_hdataF2U(SEXP dataSEXP, SEXP nvecSEXP, SEXP indexSEXP, SEXP indexgrSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type nvec(nvecSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type index(indexSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type indexgr(indexgrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(hdataF2U(data, nvec, index, indexgr, M));
    return rcpp_result_gen;
END_RCPP
}
// hdata2S
arma::mat hdata2S(const arma::mat& data, const arma::vec& nvec, const arma::mat& index, const arma::mat& indexgr, const int& M);
RcppExport SEXP _CDatanet_hdata2S(SEXP dataSEXP, SEXP nvecSEXP, SEXP indexSEXP, SEXP indexgrSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type nvec(nvecSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type index(indexSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type indexgr(indexgrSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(hdata2S(data, nvec, index, indexgr, M));
    return rcpp_result_gen;
END_RCPP
}
// fySar
void fySar(arma::vec& y, arma::vec& Gy, List& G, const arma::vec& eps, const arma::mat& igroup, const int& ngroup, const arma::vec& psi, const double& lambda);
RcppExport SEXP _CDatanet_fySar(SEXP ySEXP, SEXP GySEXP, SEXP GSEXP, SEXP epsSEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP psiSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    fySar(y, Gy, G, eps, igroup, ngroup, psi, lambda);
    return R_NilValue;
END_RCPP
}
// fySarRE
void fySarRE(arma::vec& y, arma::vec& Gye, arma::vec& ye, List& G, const arma::vec& eps, const arma::mat& igroup, const int& ngroup, const arma::vec& psi, const double& lambda);
RcppExport SEXP _CDatanet_fySarRE(SEXP ySEXP, SEXP GyeSEXP, SEXP yeSEXP, SEXP GSEXP, SEXP epsSEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP psiSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Gye(GyeSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type ye(yeSEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    fySarRE(y, Gye, ye, G, eps, igroup, ngroup, psi, lambda);
    return R_NilValue;
END_RCPP
}
// foptimSAR
double foptimSAR(const double& alphatilde, const arma::mat& X, const arma::mat& invXX, List& G, List& I, const int& n, const arma::vec& y, const arma::vec& Gy, const int& ngroup, const bool& FE, const bool& print);
RcppExport SEXP _CDatanet_foptimSAR(SEXP alphatildeSEXP, SEXP XSEXP, SEXP invXXSEXP, SEXP GSEXP, SEXP ISEXP, SEXP nSEXP, SEXP ySEXP, SEXP GySEXP, SEXP ngroupSEXP, SEXP FESEXP, SEXP printSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alphatilde(alphatildeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type invXX(invXXSEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< List& >::type I(ISEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const bool& >::type FE(FESEXP);
    Rcpp::traits::input_parameter< const bool& >::type print(printSEXP);
    rcpp_result_gen = Rcpp::wrap(foptimSAR(alphatilde, X, invXX, G, I, n, y, Gy, ngroup, FE, print));
    return rcpp_result_gen;
END_RCPP
}
// fSARjac
arma::mat fSARjac(const double& lambda, const double& s2, const arma::mat& X, const arma::mat& XX, const arma::vec& Xbeta, List& G, List& I, const arma::mat igroup, const int& ngroup, const int& n, const int& K, const bool& FE);
RcppExport SEXP _CDatanet_fSARjac(SEXP lambdaSEXP, SEXP s2SEXP, SEXP XSEXP, SEXP XXSEXP, SEXP XbetaSEXP, SEXP GSEXP, SEXP ISEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP nSEXP, SEXP KSEXP, SEXP FESEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double& >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type XX(XXSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Xbeta(XbetaSEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< List& >::type I(ISEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const bool& >::type FE(FESEXP);
    rcpp_result_gen = Rcpp::wrap(fSARjac(lambda, s2, X, XX, Xbeta, G, I, igroup, ngroup, n, K, FE));
    return rcpp_result_gen;
END_RCPP
}
// fybsar
void fybsar(arma::vec& yb, arma::vec& Gyb, List& G, const arma::mat& igroup, const int& ngroup, const arma::vec& psi, const double& lambda);
RcppExport SEXP _CDatanet_fybsar(SEXP ybSEXP, SEXP GybSEXP, SEXP GSEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP psiSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type yb(ybSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Gyb(GybSEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    fybsar(yb, Gyb, G, igroup, ngroup, psi, lambda);
    return R_NilValue;
END_RCPP
}
// foptimSAR_RE
double foptimSAR_RE(const double& alphatilde, const arma::mat& X, List& G, List& I, const arma::vec& y, const arma::vec& Gy, const arma::mat igroup, const int& ngroup, const int& n, const int& K);
RcppExport SEXP _CDatanet_foptimSAR_RE(SEXP alphatildeSEXP, SEXP XSEXP, SEXP GSEXP, SEXP ISEXP, SEXP ySEXP, SEXP GySEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP nSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alphatilde(alphatildeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< List& >::type I(ISEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(foptimSAR_RE(alphatilde, X, G, I, y, Gy, igroup, ngroup, n, K));
    return rcpp_result_gen;
END_RCPP
}
// foptimSAR0_RE
double foptimSAR0_RE(const double& alphatilde, const arma::mat& X, List& G, List& I, const arma::vec& y, const arma::vec& Gy, const arma::mat igroup, const int& ngroup, const int& n, const int& K);
RcppExport SEXP _CDatanet_foptimSAR0_RE(SEXP alphatildeSEXP, SEXP XSEXP, SEXP GSEXP, SEXP ISEXP, SEXP ySEXP, SEXP GySEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP nSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alphatilde(alphatildeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< List& >::type I(ISEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(foptimSAR0_RE(alphatilde, X, G, I, y, Gy, igroup, ngroup, n, K));
    return rcpp_result_gen;
END_RCPP
}
// fyTobit
int fyTobit(arma::vec& yst, arma::vec& y, arma::vec& Gy, arma::vec& Ztlamda, List& G, const arma::vec& eps, const arma::mat& igroup, const int& ngroup, const arma::vec& psi, const int& n, const double& lambda, const double& tol, const int& maxit);
RcppExport SEXP _CDatanet_fyTobit(SEXP ystSEXP, SEXP ySEXP, SEXP GySEXP, SEXP ZtlamdaSEXP, SEXP GSEXP, SEXP epsSEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP psiSEXP, SEXP nSEXP, SEXP lambdaSEXP, SEXP tolSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type yst(ystSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Ztlamda(ZtlamdaSEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(fyTobit(yst, y, Gy, Ztlamda, G, eps, igroup, ngroup, psi, n, lambda, tol, maxit));
    return rcpp_result_gen;
END_RCPP
}
// foptimTobit
double foptimTobit(const arma::vec& theta, const arma::mat& X, arma::vec& logdetA2, arma::vec& alphatilde, List& G2, List& I2, const int& K, const arma::vec& y, const arma::vec& Gy, const arma::uvec& idpos, const arma::uvec& idzero, const int& npos, const int& ngroup, List& I, List& W, const int& n, const arma::mat igroup, const bool print);
RcppExport SEXP _CDatanet_foptimTobit(SEXP thetaSEXP, SEXP XSEXP, SEXP logdetA2SEXP, SEXP alphatildeSEXP, SEXP G2SEXP, SEXP I2SEXP, SEXP KSEXP, SEXP ySEXP, SEXP GySEXP, SEXP idposSEXP, SEXP idzeroSEXP, SEXP nposSEXP, SEXP ngroupSEXP, SEXP ISEXP, SEXP WSEXP, SEXP nSEXP, SEXP igroupSEXP, SEXP printSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type logdetA2(logdetA2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alphatilde(alphatildeSEXP);
    Rcpp::traits::input_parameter< List& >::type G2(G2SEXP);
    Rcpp::traits::input_parameter< List& >::type I2(I2SEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type idpos(idposSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type idzero(idzeroSEXP);
    Rcpp::traits::input_parameter< const int& >::type npos(nposSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< List& >::type I(ISEXP);
    Rcpp::traits::input_parameter< List& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const bool >::type print(printSEXP);
    rcpp_result_gen = Rcpp::wrap(foptimTobit(theta, X, logdetA2, alphatilde, G2, I2, K, y, Gy, idpos, idzero, npos, ngroup, I, W, n, igroup, print));
    return rcpp_result_gen;
END_RCPP
}
// fgradvecTobit
arma::vec fgradvecTobit(arma::vec& theta, arma::mat& X, const arma::vec& logdetA2, const arma::vec& alphatilde, List& G2, List& I2, const int& K, const arma::vec& y, const arma::vec& Gy, const arma::uvec& idpos, const arma::uvec& idzero, const int& ngroup, List& I, List& W, const int& n, const arma::vec& indzero, const arma::vec& indpos, const arma::mat igroup);
RcppExport SEXP _CDatanet_fgradvecTobit(SEXP thetaSEXP, SEXP XSEXP, SEXP logdetA2SEXP, SEXP alphatildeSEXP, SEXP G2SEXP, SEXP I2SEXP, SEXP KSEXP, SEXP ySEXP, SEXP GySEXP, SEXP idposSEXP, SEXP idzeroSEXP, SEXP ngroupSEXP, SEXP ISEXP, SEXP WSEXP, SEXP nSEXP, SEXP indzeroSEXP, SEXP indposSEXP, SEXP igroupSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type logdetA2(logdetA2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alphatilde(alphatildeSEXP);
    Rcpp::traits::input_parameter< List& >::type G2(G2SEXP);
    Rcpp::traits::input_parameter< List& >::type I2(I2SEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type idpos(idposSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type idzero(idzeroSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< List& >::type I(ISEXP);
    Rcpp::traits::input_parameter< List& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type indzero(indzeroSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type indpos(indposSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type igroup(igroupSEXP);
    rcpp_result_gen = Rcpp::wrap(fgradvecTobit(theta, X, logdetA2, alphatilde, G2, I2, K, y, Gy, idpos, idzero, ngroup, I, W, n, indzero, indpos, igroup));
    return rcpp_result_gen;
END_RCPP
}
// fcovSTC
List fcovSTC(const arma::vec& theta, const arma::mat& X, List& G2, List& I, List& W, const int& K, const int& n, const arma::vec& y, const arma::vec& Gy, const arma::vec& indzero, const arma::vec& indpos, const arma::mat& igroup, const int& ngroup, const bool& ccov);
RcppExport SEXP _CDatanet_fcovSTC(SEXP thetaSEXP, SEXP XSEXP, SEXP G2SEXP, SEXP ISEXP, SEXP WSEXP, SEXP KSEXP, SEXP nSEXP, SEXP ySEXP, SEXP GySEXP, SEXP indzeroSEXP, SEXP indposSEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP ccovSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< List& >::type G2(G2SEXP);
    Rcpp::traits::input_parameter< List& >::type I(ISEXP);
    Rcpp::traits::input_parameter< List& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gy(GySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type indzero(indzeroSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type indpos(indposSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const bool& >::type ccov(ccovSEXP);
    rcpp_result_gen = Rcpp::wrap(fcovSTC(theta, X, G2, I, W, K, n, y, Gy, indzero, indpos, igroup, ngroup, ccov));
    return rcpp_result_gen;
END_RCPP
}
// fEytbit
int fEytbit(arma::vec& Ey, arma::vec& GEy, List& G, const arma::mat& igroup, const int& ngroup, const arma::vec& psi, const double& lambda, const double& sigma, const int& n, const double& tol, const int& maxit);
RcppExport SEXP _CDatanet_fEytbit(SEXP EySEXP, SEXP GEySEXP, SEXP GSEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP psiSEXP, SEXP lambdaSEXP, SEXP sigmaSEXP, SEXP nSEXP, SEXP tolSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type Ey(EySEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type GEy(GEySEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(fEytbit(Ey, GEy, G, igroup, ngroup, psi, lambda, sigma, n, tol, maxit));
    return rcpp_result_gen;
END_RCPP
}
// foptimRE_TBT
double foptimRE_TBT(arma::vec& Ey, arma::vec& GEy, const arma::vec& theta, const arma::vec& yidpos, const arma::mat& X, List& G, const arma::mat& igroup, const int& ngroup, const int& npos, const arma::uvec& idpos, const arma::uvec& idzero, const int& K, const int& n, const double& tol, const int& maxit);
RcppExport SEXP _CDatanet_foptimRE_TBT(SEXP EySEXP, SEXP GEySEXP, SEXP thetaSEXP, SEXP yidposSEXP, SEXP XSEXP, SEXP GSEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP nposSEXP, SEXP idposSEXP, SEXP idzeroSEXP, SEXP KSEXP, SEXP nSEXP, SEXP tolSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type Ey(EySEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type GEy(GEySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type yidpos(yidposSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type npos(nposSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type idpos(idposSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type idzero(idzeroSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(foptimRE_TBT(Ey, GEy, theta, yidpos, X, G, igroup, ngroup, npos, idpos, idzero, K, n, tol, maxit));
    return rcpp_result_gen;
END_RCPP
}
// foptimTBT_NPL
double foptimTBT_NPL(const arma::vec& yidpos, const arma::vec& GEy, const arma::mat& X, const arma::vec& theta, const int& npos, const arma::uvec& idpos, const arma::uvec& idzero, const int& K, const bool& print);
RcppExport SEXP _CDatanet_foptimTBT_NPL(SEXP yidposSEXP, SEXP GEySEXP, SEXP XSEXP, SEXP thetaSEXP, SEXP nposSEXP, SEXP idposSEXP, SEXP idzeroSEXP, SEXP KSEXP, SEXP printSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type yidpos(yidposSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type GEy(GEySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const int& >::type npos(nposSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type idpos(idposSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type idzero(idzeroSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const bool& >::type print(printSEXP);
    rcpp_result_gen = Rcpp::wrap(foptimTBT_NPL(yidpos, GEy, X, theta, npos, idpos, idzero, K, print));
    return rcpp_result_gen;
END_RCPP
}
// fLTBT_NPL
void fLTBT_NPL(arma::vec& Ey, arma::vec& GEy, List& G, const arma::mat& X, const arma::vec& theta, const arma::mat& igroup, const int& ngroup, const int& n, const int& K);
RcppExport SEXP _CDatanet_fLTBT_NPL(SEXP EySEXP, SEXP GEySEXP, SEXP GSEXP, SEXP XSEXP, SEXP thetaSEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP nSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type Ey(EySEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type GEy(GEySEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    fLTBT_NPL(Ey, GEy, G, X, theta, igroup, ngroup, n, K);
    return R_NilValue;
END_RCPP
}
// sartLBFGS
List sartLBFGS(Eigen::VectorXd par, const arma::vec& yidpos, const arma::vec& GEy, const arma::mat& X, const int& npos, const arma::uvec& idpos, const arma::uvec& idzero, const int& K, const int& maxit, const double& eps_f, const double& eps_g, const bool& print);
RcppExport SEXP _CDatanet_sartLBFGS(SEXP parSEXP, SEXP yidposSEXP, SEXP GEySEXP, SEXP XSEXP, SEXP nposSEXP, SEXP idposSEXP, SEXP idzeroSEXP, SEXP KSEXP, SEXP maxitSEXP, SEXP eps_fSEXP, SEXP eps_gSEXP, SEXP printSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type par(parSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type yidpos(yidposSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type GEy(GEySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int& >::type npos(nposSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type idpos(idposSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type idzero(idzeroSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps_f(eps_fSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps_g(eps_gSEXP);
    Rcpp::traits::input_parameter< const bool& >::type print(printSEXP);
    rcpp_result_gen = Rcpp::wrap(sartLBFGS(par, yidpos, GEy, X, npos, idpos, idzero, K, maxit, eps_f, eps_g, print));
    return rcpp_result_gen;
END_RCPP
}
// fnewEyTBT
void fnewEyTBT(arma::vec& Ey, arma::vec& GEy, List& G, const arma::mat& igroup, const int& ngroup, const arma::mat& X, const arma::vec& theta, const int& K, const int& n, const double& tol, const int& maxit);
RcppExport SEXP _CDatanet_fnewEyTBT(SEXP EySEXP, SEXP GEySEXP, SEXP GSEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP XSEXP, SEXP thetaSEXP, SEXP KSEXP, SEXP nSEXP, SEXP tolSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type Ey(EySEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type GEy(GEySEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    fnewEyTBT(Ey, GEy, G, igroup, ngroup, X, theta, K, n, tol, maxit);
    return R_NilValue;
END_RCPP
}
// fcovSTI
List fcovSTI(const int& n, const arma::vec& GEy, const arma::vec& theta, const arma::mat& X, const int& K, List& G, const arma::mat& igroup, const int& ngroup, const bool& ccov);
RcppExport SEXP _CDatanet_fcovSTI(SEXP nSEXP, SEXP GEySEXP, SEXP thetaSEXP, SEXP XSEXP, SEXP KSEXP, SEXP GSEXP, SEXP igroupSEXP, SEXP ngroupSEXP, SEXP ccovSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type GEy(GEySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< List& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type igroup(igroupSEXP);
    Rcpp::traits::input_parameter< const int& >::type ngroup(ngroupSEXP);
    Rcpp::traits::input_parameter< const bool& >::type ccov(ccovSEXP);
    rcpp_result_gen = Rcpp::wrap(fcovSTI(n, GEy, theta, X, K, G, igroup, ngroup, ccov));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CDatanet_simG", (DL_FUNC) &_CDatanet_simG, 3},
    {"_CDatanet_simGnorm", (DL_FUNC) &_CDatanet_simGnorm, 3},
    {"_CDatanet_fGnormalise", (DL_FUNC) &_CDatanet_fGnormalise, 2},
    {"_CDatanet_rem_non_fin", (DL_FUNC) &_CDatanet_rem_non_fin, 1},
    {"_CDatanet_frVtoM", (DL_FUNC) &_CDatanet_frVtoM, 3},
    {"_CDatanet_frVtoMnorm", (DL_FUNC) &_CDatanet_frVtoMnorm, 3},
    {"_CDatanet_frMtoV", (DL_FUNC) &_CDatanet_frMtoV, 3},
    {"_CDatanet_frMceiltoV", (DL_FUNC) &_CDatanet_frMceiltoV, 3},
    {"_CDatanet_fcdlambdat", (DL_FUNC) &_CDatanet_fcdlambdat, 4},
    {"_CDatanet_fcddlambdat", (DL_FUNC) &_CDatanet_fcddlambdat, 4},
    {"_CDatanet_fcdlambda", (DL_FUNC) &_CDatanet_fcdlambda, 4},
    {"_CDatanet_fcddlambda", (DL_FUNC) &_CDatanet_fcddlambda, 4},
    {"_CDatanet_fL", (DL_FUNC) &_CDatanet_fL, 9},
    {"_CDatanet_fLncond", (DL_FUNC) &_CDatanet_fLncond, 10},
    {"_CDatanet_fye", (DL_FUNC) &_CDatanet_fye, 17},
    {"_CDatanet_fyencond", (DL_FUNC) &_CDatanet_fyencond, 18},
    {"_CDatanet_fy", (DL_FUNC) &_CDatanet_fy, 10},
    {"_CDatanet_fmeffects", (DL_FUNC) &_CDatanet_fmeffects, 10},
    {"_CDatanet_fdelta", (DL_FUNC) &_CDatanet_fdelta, 5},
    {"_CDatanet_foptimREM", (DL_FUNC) &_CDatanet_foptimREM, 22},
    {"_CDatanet_foptimREM_NPL", (DL_FUNC) &_CDatanet_foptimREM_NPL, 17},
    {"_CDatanet_fL_NPL", (DL_FUNC) &_CDatanet_fL_NPL, 16},
    {"_CDatanet_fnewye", (DL_FUNC) &_CDatanet_fnewye, 18},
    {"_CDatanet_cdnetLBFGS", (DL_FUNC) &_CDatanet_cdnetLBFGS, 20},
    {"_CDatanet_flogintphi", (DL_FUNC) &_CDatanet_flogintphi, 8},
    {"_CDatanet_fcovCDI", (DL_FUNC) &_CDatanet_fcovCDI, 19},
    {"_CDatanet_fcddEy", (DL_FUNC) &_CDatanet_fcddEy, 17},
    {"_CDatanet_fdummies", (DL_FUNC) &_CDatanet_fdummies, 4},
    {"_CDatanet_fdatar", (DL_FUNC) &_CDatanet_fdatar, 4},
    {"_CDatanet_frMtoVbyCOL", (DL_FUNC) &_CDatanet_frMtoVbyCOL, 3},
    {"_CDatanet_frMtoVbyCOLsym", (DL_FUNC) &_CDatanet_frMtoVbyCOLsym, 3},
    {"_CDatanet_fmusum", (DL_FUNC) &_CDatanet_fmusum, 6},
    {"_CDatanet_fmusumsym", (DL_FUNC) &_CDatanet_fmusumsym, 5},
    {"_CDatanet_bayesmunu", (DL_FUNC) &_CDatanet_bayesmunu, 21},
    {"_CDatanet_bayesmu", (DL_FUNC) &_CDatanet_bayesmu, 19},
    {"_CDatanet_fhomobeta2f", (DL_FUNC) &_CDatanet_fhomobeta2f, 12},
    {"_CDatanet_fhomobeta1f", (DL_FUNC) &_CDatanet_fhomobeta1f, 12},
    {"_CDatanet_fhomobetasym", (DL_FUNC) &_CDatanet_fhomobetasym, 12},
    {"_CDatanet_hdataF2L", (DL_FUNC) &_CDatanet_hdataF2L, 4},
    {"_CDatanet_hdataF2U", (DL_FUNC) &_CDatanet_hdataF2U, 5},
    {"_CDatanet_hdata2S", (DL_FUNC) &_CDatanet_hdata2S, 5},
    {"_CDatanet_fySar", (DL_FUNC) &_CDatanet_fySar, 8},
    {"_CDatanet_fySarRE", (DL_FUNC) &_CDatanet_fySarRE, 9},
    {"_CDatanet_foptimSAR", (DL_FUNC) &_CDatanet_foptimSAR, 11},
    {"_CDatanet_fSARjac", (DL_FUNC) &_CDatanet_fSARjac, 12},
    {"_CDatanet_fybsar", (DL_FUNC) &_CDatanet_fybsar, 7},
    {"_CDatanet_foptimSAR_RE", (DL_FUNC) &_CDatanet_foptimSAR_RE, 10},
    {"_CDatanet_foptimSAR0_RE", (DL_FUNC) &_CDatanet_foptimSAR0_RE, 10},
    {"_CDatanet_fyTobit", (DL_FUNC) &_CDatanet_fyTobit, 13},
    {"_CDatanet_foptimTobit", (DL_FUNC) &_CDatanet_foptimTobit, 18},
    {"_CDatanet_fgradvecTobit", (DL_FUNC) &_CDatanet_fgradvecTobit, 18},
    {"_CDatanet_fcovSTC", (DL_FUNC) &_CDatanet_fcovSTC, 14},
    {"_CDatanet_fEytbit", (DL_FUNC) &_CDatanet_fEytbit, 11},
    {"_CDatanet_foptimRE_TBT", (DL_FUNC) &_CDatanet_foptimRE_TBT, 15},
    {"_CDatanet_foptimTBT_NPL", (DL_FUNC) &_CDatanet_foptimTBT_NPL, 9},
    {"_CDatanet_fLTBT_NPL", (DL_FUNC) &_CDatanet_fLTBT_NPL, 9},
    {"_CDatanet_sartLBFGS", (DL_FUNC) &_CDatanet_sartLBFGS, 12},
    {"_CDatanet_fnewEyTBT", (DL_FUNC) &_CDatanet_fnewEyTBT, 11},
    {"_CDatanet_fcovSTI", (DL_FUNC) &_CDatanet_fcovSTI, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_CDatanet(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
